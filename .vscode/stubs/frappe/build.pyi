"""
This type stub file was generated by pyright.
"""

timestamps = ...
app_paths = ...
sites_path = ...

def download_file(url, prefix): ...
def build_missing_files(): ...
def get_assets_link(frappe_head): ...
def download_frappe_assets(verbose=...):  # -> bool:
    """Downloads and sets up Frappe assets if they exist based on the current
    commit HEAD.
    Returns True if correctly setup else returns False.
    """
    ...

def symlink(target, link_name, overwrite=...):  # -> None:
    """
    Create a symbolic link named link_name pointing to target.
    If link_name exists then FileExistsError is raised, unless overwrite=True.
    When trying to overwrite a directory, IsADirectoryError is raised.

    Source: https://stackoverflow.com/a/55742015/10309266
    """
    ...

def setup(): ...
def get_node_pacman(): ...
def bundle(
    no_compress, app=..., hard_link=..., verbose=..., skip_frappe=...
):  # -> None:
    """concat / minify js files"""
    ...

def watch(no_compress):  # -> None:
    """watch and rebuild if necessary"""
    ...

def check_yarn(): ...
def get_node_env(): ...
def get_safe_max_old_space_size(): ...
def generate_assets_map(): ...
def clear_broken_symlinks(): ...
def unstrip(message: str) -> str:
    """Pads input string on the right side until the last available column in the terminal"""
    ...

def make_asset_dirs(hard_link=...): ...
def link_assets_dir(source, target, hard_link=...): ...
def setup_assets_dirs(): ...
def clear_broken_symlinks(): ...
def unstrip(message): ...
def make_asset_dirs(hard_link=...): ...
def link_assets_dir(source, target, hard_link=...): ...
def build(no_compress=..., verbose=...): ...
def get_build_maps():  # -> dict[Unknown, Unknown]:
    """get all build.jsons with absolute paths"""
    ...

def pack(target, sources, no_compress, verbose): ...
def html_to_js_template(path, content):  # -> str:
    """returns HTML template content as Javascript code, adding it to `frappe.templates`"""
    ...

def scrub_html_template(content):  # -> str:
    """Returns HTML content with removed whitespace and comments"""
    ...

def files_dirty(): ...
def compile_less(): ...
