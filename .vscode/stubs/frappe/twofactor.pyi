"""
This type stub file was generated by pyright.
"""

class ExpiredLoginException(Exception): ...

def toggle_two_factor_auth(state, roles=...):  # -> None:
    """Enable or disable 2FA in site_config and roles"""
    ...

def two_factor_is_enabled(user=...):  # -> int | bool:
    """Returns True if 2FA is enabled."""
    ...

def should_run_2fa(user):  # -> int | bool:
    """Check if 2fa should run."""
    ...

def get_cached_user_pass():  # -> tuple[Unknown | None, Unknown | None]:
    """Get user and password if set."""
    ...

def authenticate_for_2factor(user):  # -> None:
    """Authenticate two factor for enabled user before login."""
    ...

def cache_2fa_data(user, token, otp_secret, tmp_id):  # -> None:
    """Cache and set expiry for data."""
    ...

def two_factor_is_enabled_for_(user):  # -> bool:
    """Check if 2factor is enabled for user."""
    ...

def get_otpsecret_for_(user):  # -> str:
    """Set OTP Secret for user even if not set."""
    ...

def get_verification_method(): ...
def confirm_otp_token(login_manager, otp=..., tmp_id=...):  # -> bool | None:
    """Confirm otp matches."""
    ...

def get_verification_obj(user, token, otp_secret): ...
def process_2fa_for_sms(user, token, otp_secret):  # -> dict[str, bool | str]:
    """Process sms method for 2fa."""
    ...

def process_2fa_for_otp_app(user, otp_secret, otp_issuer):  # -> dict[str, str | bool]:
    """Process OTP App method for 2fa."""
    ...

def process_2fa_for_email(
    user, token, otp_secret, otp_issuer, method=...
):  # -> dict[str, bool | Unknown | str]:
    """Process Email method for 2fa."""
    ...

def get_email_subject_for_2fa(kwargs_dict):
    """Get email subject for 2fa."""
    ...

def get_email_body_for_2fa(kwargs_dict):
    """Get email body for 2fa."""
    ...

def get_email_subject_for_qr_code(kwargs_dict):
    """Get QRCode email subject."""
    ...

def get_email_body_for_qr_code(kwargs_dict):
    """Get QRCode email body."""
    ...

def get_link_for_qrcode(user, totp_uri):  # -> str:
    """Get link to temporary page showing QRCode."""
    ...

def send_token_via_sms(otpsecret, token=..., phone_no=...):  # -> bool:
    """Send token as sms to user."""
    ...

def send_token_via_email(
    user, token, otp_secret, otp_issuer, subject=..., message=...
):  # -> bool:
    """Send token to user as email."""
    ...

def get_qr_svg_code(totp_uri):  # -> bytes:
    """Get SVG code to display Qrcode for OTP."""
    ...

def qrcode_as_png(user, totp_uri):  # -> str:
    """Save temporary Qrcode to server."""
    ...

def create_barcode_folder():
    """Get Barcodes folder."""
    ...

def delete_qrimage(user, check_expiry=...):  # -> None:
    """Delete Qrimage when user logs in."""
    ...

def delete_all_barcodes_for_users():  # -> None:
    """Task to delete all barcodes for user."""
    ...

def should_remove_barcode_image(barcode):  # -> bool:
    """Check if it's time to delete barcode image from server."""
    ...

def disable(): ...
