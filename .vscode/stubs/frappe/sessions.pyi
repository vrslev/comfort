"""
This type stub file was generated by pyright.
"""

import frappe

@frappe.whitelist(allow_guest=True)
def clear(user=...): ...
def clear_sessions(user=..., keep_current=..., device=..., force=...):  # -> None:
    """Clear other sessions of the current user. Called at login / logout

    :param user: user name (default: current user)
    :param keep_current: keep current session (default: false)
    :param device: delete sessions of this device (default: desktop, mobile)
    :param force: triggered by the user (default false)
    """
    ...

def get_sessions_to_clear(user=..., keep_current=..., device=...):
    """Returns sessions of the current user. Called at login / logout

    :param user: user name (default: current user)
    :param keep_current: keep current session (default: false)
    :param device: delete sessions of this device (default: desktop, mobile)
    """
    ...

def delete_session(sid=..., user=..., reason=...): ...
def clear_all_sessions(reason=...):  # -> None:
    """This effectively logs out all users"""
    ...

def get_expired_sessions():  # -> list[Unknown]:
    """Returns list of expired sessions"""
    ...

def clear_expired_sessions():  # -> None:
    """This function is meant to be called from scheduler"""
    ...

def get():
    """get session boot info"""
    ...

def get_csrf_token(): ...
def generate_csrf_token(): ...

class Session:
    def __init__(self, user, resume=..., full_name=..., user_type=...) -> None: ...
    def start(self):  # -> None:
        """start a new session"""
        ...
    def insert_session_record(self): ...
    def resume(self):  # -> None:
        """non-login request: load a session"""
        ...
    def get_session_record(self):  # -> None:
        """get session record, or return the standard Guest Record"""
        ...
    def get_session_data(self): ...
    def get_session_data_from_cache(self): ...
    def get_session_data_from_db(self): ...
    def start_as_guest(self):  # -> None:
        """all guests share the same 'Guest' session"""
        ...
    def update(self, force=...):  # -> bool | None:
        """extend session expiry"""
        ...

def get_expiry_period_for_query(device=...): ...
def get_expiry_in_seconds(expiry=..., device=...): ...
def get_expiry_period(device=...): ...
def get_geo_from_ip(ip_addr): ...
def get_geo_ip_country(ip_addr): ...
