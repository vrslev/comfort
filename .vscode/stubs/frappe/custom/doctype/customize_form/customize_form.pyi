"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class CustomizeForm(Document):
    def on_update(self): ...
    @frappe.whitelist()
    def fetch_to_customize(self): ...
    def validate_doctype(self, meta):  # -> None:
        """
        Check if the doctype is allowed to be customized.
        """
        ...
    def load_properties(self, meta):  # -> None:
        """
        Load the customize object (this) with the metadata properties
        """
        ...
    def create_auto_repeat_custom_field_if_required(self, meta):  # -> None:
        """
        Create auto repeat custom field if it's not already present
        """
        ...
    def get_name_translation(self):
        """Get translation object if exists of current doctype name in the default language"""
        ...
    def set_name_translation(self):  # -> None:
        """Create, update custom translation for this doctype"""
        ...
    def clear_existing_doc(self): ...
    @frappe.whitelist()
    def save_customization(self): ...
    def set_property_setters(self): ...
    def set_property_setters_for_doctype(self, meta): ...
    def set_property_setters_for_docfield(self, meta, df, meta_df): ...
    def allow_property_change(self, prop, meta_df, df): ...
    def set_property_setters_for_actions_and_links(self, meta):  # -> None:
        """
        Apply property setters or create custom records for DocType Action and DocType Link
        """
        ...
    def update_order_property_setter(self, has_custom, fieldname):  # -> None:
        """
        We need to maintain the order of the link/actions if the user has shuffled them.
        So we create a new property (ex `links_order`) to keep a list of items.
        """
        ...
    def clear_removed_items(self, doctype, items):  # -> None:
        """
        Clear rows that do not appear in `items`. These have been removed by the user.
        """
        ...
    def update_custom_fields(self): ...
    def add_custom_field(self, df, i): ...
    def update_in_custom_field(self, df, i): ...
    def delete_custom_fields(self): ...
    def make_property_setter(
        self, prop, value, property_type, fieldname=..., apply_on=..., row_name=...
    ): ...
    def get_existing_property_value(self, property_name, fieldname=...): ...
    def validate_fieldtype_change(self, df, old_value, new_value): ...
    def validate_fieldtype_length(self): ...
    @frappe.whitelist()
    def reset_to_defaults(self): ...
    @classmethod
    def allow_fieldtype_change(self, old_type: str, new_type: str) -> bool:
        """allow type change, if both old_type and new_type are in same field group.
        field groups are defined in ALLOWED_FIELDTYPE_CHANGE variables.
        """
        ...

def reset_customization(doctype): ...

doctype_properties = ...
docfield_properties = ...
doctype_link_properties = ...
doctype_action_properties = ...
ALLOWED_FIELDTYPE_CHANGE = ...
ALLOWED_OPTIONS_CHANGE = ...
