"""
This type stub file was generated by pyright.
"""

import importlib
import inspect
import json
import os
import sys
import typing
import warnings

import click
from past.builtins import cmp
from six import binary_type, iteritems, string_types, text_type
from werkzeug.local import Local, release_local

from frappe.database.mariadb.database import MariaDBDatabase
from frappe.database.postgres.database import PostgresDatabase

from .exceptions import *
from .utils.jinja import (
    get_email_from_template,
    get_jenv,
    get_jloader,
    get_template,
    render_template,
)
from .utils.lazy_loader import lazy_import

"""
This type stub file was generated by pyright.
"""
_dev_server = ...
if _dev_server: ...
faker = ...
__version__ = ...
__title__ = ...
local = ...
controllers = ...

class _dict(dict):
    """dict like object that exposes keys as attributes"""

    def __getattr__(self, key): ...
    def __setattr__(self, key, value): ...
    def __getstate__(self): ...
    def __setstate__(self, d): ...
    def update(self, d):
        """update and return self -- the missing dict feature in python"""
        ...
    def copy(self): ...

def _(msg, lang=..., context=...):
    """Returns translated string in current lang, if exists.
    Usage:
            _('Change')
            _('Change', context='Coins')
    """
    ...

def as_unicode(text, encoding=...):
    """Convert to unicode if required"""
    ...

def get_lang_dict(fortype, name=...):
    """Returns the translated language dict for the given type and name.

    :param fortype: must be one of `doctype`, `page`, `report`, `include`, `jsfile`, `boot`
    :param name: name of the document for which assets are to be returned."""
    ...

def set_user_lang(user, user_language=...):
    """Guess and set user language for the session. `frappe.local.lang`"""
    ...

db = ...
conf = ...
form = ...
request = ...
response = ...
session = ...
user = ...
flags = ...
error_log = ...
debug_log = ...
message_log = ...
lang = ...
if typing.TYPE_CHECKING:
    db: typing.Union[MariaDBDatabase, PostgresDatabase]
    ...

def init(site, sites_path=..., new_site=...):
    """Initialize frappe for the current site. Reset thread locals `frappe.local`"""
    ...

def connect(site=..., db_name=..., set_admin_as_user=...):
    """Connect to site database instance.

    :param site: If site is given, calls `frappe.init`.
    :param db_name: Optional. Will use from `site_config.json`.
    :param set_admin_as_user: Set Administrator as current user.
    """
    ...

def connect_replica(): ...
def get_site_config(sites_path=..., site_path=...):
    """Returns `site_config.json` combined with `sites/common_site_config.json`.
    `site_config` is a set of site wide settings like database name, password, email etc."""
    ...

def get_conf(site=...): ...

class init_site:
    def __init__(self, site=...) -> None:
        """If site==None, initialize it for empty site ('') to load common_site_config.json"""
        ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...

def destroy():
    """Closes connection and releases werkzeug local."""
    ...

redis_server = ...

def cache():
    """Returns redis connection."""
    ...

def get_traceback():
    """Returns error traceback."""
    ...

def errprint(msg):
    """Log error. This is sent back as `exc` in response.

    :param msg: Message."""
    ...

def print_sql(enable=...): ...
def log(msg):
    """Add to `debug_log`.

    :param msg: Message."""
    ...

def msgprint(
    msg,
    title=...,
    raise_exception=...,
    as_table=...,
    as_list=...,
    indicator=...,
    alert=...,
    primary_action=...,
    is_minimizable=...,
    wide=...,
):
    """Print a message to the user (via HTTP response).
    Messages are sent in the `__server_messages` property in the
    response JSON and shown in a pop-up / modal.

    :param msg: Message.
    :param title: [optional] Message title.
    :param raise_exception: [optional] Raise given exception and show message.
    :param as_table: [optional] If `msg` is a list of lists, render as HTML table.
    :param as_list: [optional] If `msg` is a list, render as un-ordered list.
    :param primary_action: [optional] Bind a primary server/client side action.
    :param is_minimizable: [optional] Allow users to minimize the modal
    :param wide: [optional] Show wide modal
    """
    ...

def clear_messages(): ...
def get_message_log(): ...
def clear_last_message(): ...
def throw(msg, exc=..., title=..., is_minimizable=..., wide=..., as_list=...):
    """Throw execption and show message (`msgprint`).

    :param msg: Message.
    :param exc: Exception class. Default `frappe.ValidationError`"""
    ...

def emit_js(js, user=..., **kwargs): ...
def create_folder(path, with_init=...):
    """Create a folder in the given path and add an `__init__.py` file (optional).

    :param path: Folder path.
    :param with_init: Create `__init__.py` in the new folder."""
    ...

def set_user(username):
    """Set current user.

    :param username: **User** name to set as current user."""
    ...

def get_user(): ...
def get_roles(username=...):
    """Returns roles of current user."""
    ...

def get_request_header(key, default=...):
    """Return HTTP request header.

    :param key: HTTP header key.
    :param default: Default value."""
    ...

def sendmail(
    recipients=...,
    sender=...,
    subject=...,
    message=...,
    as_markdown=...,
    delayed=...,
    reference_doctype=...,
    reference_name=...,
    unsubscribe_method=...,
    unsubscribe_params=...,
    unsubscribe_message=...,
    add_unsubscribe_link=...,
    attachments=...,
    content=...,
    doctype=...,
    name=...,
    reply_to=...,
    queue_separately=...,
    cc=...,
    bcc=...,
    message_id=...,
    in_reply_to=...,
    send_after=...,
    expose_recipients=...,
    send_priority=...,
    communication=...,
    retry=...,
    now=...,
    read_receipt=...,
    is_notification=...,
    inline_images=...,
    template=...,
    args=...,
    header=...,
    print_letterhead=...,
    with_container=...,
):
    """Send email using user's default **Email Account** or global default **Email Account**.


    :param recipients: List of recipients.
    :param sender: Email sender. Default is current user or default outgoing account.
    :param subject: Email Subject.
    :param message: (or `content`) Email Content.
    :param as_markdown: Convert content markdown to HTML.
    :param delayed: Send via scheduled email sender **Email Queue**. Don't send immediately. Default is true
    :param send_priority: Priority for Email Queue, default 1.
    :param reference_doctype: (or `doctype`) Append as communication to this DocType.
    :param reference_name: (or `name`) Append as communication to this document name.
    :param unsubscribe_method: Unsubscribe url with options email, doctype, name. e.g. `/api/method/unsubscribe`
    :param unsubscribe_params: Unsubscribe paramaters to be loaded on the unsubscribe_method [optional] (dict).
    :param attachments: List of attachments.
    :param reply_to: Reply-To Email Address.
    :param message_id: Used for threading. If a reply is received to this email, Message-Id is sent back as In-Reply-To in received email.
    :param in_reply_to: Used to send the Message-Id of a received email back as In-Reply-To.
    :param send_after: Send after the given datetime.
    :param expose_recipients: Display all recipients in the footer message - "This email was sent to"
    :param communication: Communication link to be set in Email Queue record
    :param inline_images: List of inline images as {"filename", "filecontent"}. All src properties will be replaced with random Content-Id
    :param template: Name of html template from templates/emails folder
    :param args: Arguments for rendering the template
    :param header: Append header in email
    :param with_container: Wraps email inside a styled container
    """
    ...

whitelisted = ...
guest_methods = ...
xss_safe_methods = ...
allowed_http_methods_for_whitelisted_func = ...

def whitelist(allow_guest=..., xss_safe=..., methods=...):
    """
    Decorator for whitelisting a function and making it accessible via HTTP.
    Standard request will be `/api/method/[path.to.method]`

    :param allow_guest: Allow non logged-in user to access this method.
    :param methods: Allowed http method to access the method.

    Use as:

            @frappe.whitelist()
            def myfunc(param1, param2):
                    pass
    """
    ...

def is_whitelisted(method): ...
def read_only(): ...
def only_for(roles, message=...):
    """Raise `frappe.PermissionError` if the user does not have any of the given **Roles**.

    :param roles: List of roles to check."""
    ...

def get_domain_data(module): ...
def clear_cache(user=..., doctype=...):
    """Clear **User**, **DocType** or global cache.

    :param user: If user is given, only user cache is cleared.
    :param doctype: If doctype is given, only DocType cache is cleared."""
    ...

def only_has_select_perm(doctype, user=..., ignore_permissions=...): ...
def has_permission(doctype=..., ptype=..., doc=..., user=..., verbose=..., throw=...):
    """Raises `frappe.PermissionError` if not permitted.

    :param doctype: DocType for which permission is to be check.
    :param ptype: Permission type (`read`, `write`, `create`, `submit`, `cancel`, `amend`). Default: `read`.
    :param doc: [optional] Checks User permissions for given doc.
    :param user: [optional] Check for given user. Default: current user."""
    ...

def has_website_permission(doc=..., ptype=..., user=..., verbose=..., doctype=...):
    """Raises `frappe.PermissionError` if not permitted.

    :param doctype: DocType for which permission is to be check.
    :param ptype: Permission type (`read`, `write`, `create`, `submit`, `cancel`, `amend`). Default: `read`.
    :param doc: Checks User permissions for given doc.
    :param user: [optional] Check for given user. Default: current user."""
    ...

def is_table(doctype):
    """Returns True if `istable` property (indicating child Table) is set for given DocType."""
    ...

def get_precision(doctype, fieldname, currency=..., doc=...):
    """Get precision for a given field"""
    ...

def generate_hash(txt=..., length=...):
    """Generates random hash for given text + current timestamp + random string."""
    ...

def reset_metadata_version():
    """Reset `metadata_version` (Client (Javascript) build ID) hash."""
    ...

def new_doc(doctype, parent_doc=..., parentfield=..., as_dict=...):
    """Returns a new document of the given DocType with defaults set.

    :param doctype: DocType of the new document.
    :param parent_doc: [optional] add to parent document.
    :param parentfield: [optional] add against this `parentfield`."""
    ...

def set_value(doctype, docname, fieldname, value=...):
    """Set document value. Calls `frappe.client.set_value`"""
    ...

def get_cached_doc(*args, **kwargs): ...
def get_document_cache_key(doctype, name): ...
def clear_document_cache(doctype, name): ...
def get_cached_value(doctype, name, fieldname, as_dict=...): ...
def get_doc(*args, **kwargs):
    """Return a `frappe.model.document.Document` object of the given type and name.

    :param arg1: DocType name as string **or** document JSON.
    :param arg2: [optional] Document name as string.

    Examples:

            # insert a new document
            todo = frappe.get_doc({"doctype":"ToDo", "description": "test"})
            todo.insert()

            # open an existing document
            todo = frappe.get_doc("ToDo", "TD0001")

    """
    ...

def get_last_doc(doctype, filters=..., order_by=...):
    """Get last created document of this type."""
    ...

def get_single(doctype):
    """Return a `frappe.model.document.Document` object of the given Single doctype."""
    ...

def get_meta(doctype, cached=...):
    """Get `frappe.model.meta.Meta` instance of given doctype name."""
    ...

def get_meta_module(doctype): ...
def delete_doc(
    doctype=...,
    name=...,
    force=...,
    ignore_doctypes=...,
    for_reload=...,
    ignore_permissions=...,
    flags=...,
    ignore_on_trash=...,
    ignore_missing=...,
    delete_permanently=...,
):
    """Delete a document. Calls `frappe.model.delete_doc.delete_doc`.

    :param doctype: DocType of document to be delete.
    :param name: Name of document to be delete.
    :param force: Allow even if document is linked. Warning: This may lead to data integrity errors.
    :param ignore_doctypes: Ignore if child table is one of these.
    :param for_reload: Call `before_reload` trigger before deleting.
    :param ignore_permissions: Ignore user permissions.
    :param delete_permanently: Do not create a Deleted Document for the document."""
    ...

def delete_doc_if_exists(doctype, name, force=...):
    """Delete document if exists."""
    ...

def reload_doctype(doctype, force=..., reset_permissions=...):
    """Reload DocType from model (`[module]/[doctype]/[name]/[name].json`) files."""
    ...

def reload_doc(module, dt=..., dn=..., force=..., reset_permissions=...):
    """Reload Document from model (`[module]/[doctype]/[name]/[name].json`) files.

    :param module: Module name.
    :param dt: DocType name.
    :param dn: Document name.
    :param force: Reload even if `modified` timestamp matches.
    """
    ...

@whitelist()
def rename_doc(*args, **kwargs):
    """
    Renames a doc(dt, old) to doc(dt, new) and updates all linked fields of type "Link"

    Calls `frappe.model.rename_doc.rename_doc`
    """
    ...

def get_module(modulename):
    """Returns a module object for given Python module name using `importlib.import_module`."""
    ...

def scrub(txt):
    """Returns sluggified string. e.g. `Sales Order` becomes `sales_order`."""
    ...

def unscrub(txt):
    """Returns titlified string. e.g. `sales_order` becomes `Sales Order`."""
    ...

def get_module_path(module, *joins):
    """Get the path of the given module name.

    :param module: Module name.
    :param *joins: Join additional path elements using `os.path.join`."""
    ...

def get_app_path(app_name, *joins):
    """Return path of given app.

    :param app: App name.
    :param *joins: Join additional path elements using `os.path.join`."""
    ...

def get_site_path(*joins):
    """Return path of current site.

    :param *joins: Join additional path elements using `os.path.join`."""
    ...

def get_pymodule_path(modulename, *joins):
    """Return path of given Python module name.

    :param modulename: Python module name.
    :param *joins: Join additional path elements using `os.path.join`."""
    ...

def get_module_list(app_name):
    """Get list of modules for given all via `app/modules.txt`."""
    ...

def get_all_apps(with_internal_apps=..., sites_path=...):
    """Get list of all apps via `sites/apps.txt`."""
    ...

def get_installed_apps(sort=..., frappe_last=...):
    """Get list of installed apps in current site."""
    ...

def get_doc_hooks():
    """Returns hooked methods for given doc. It will expand the dict tuple if required."""
    ...

def get_hooks(hook=..., default=..., app_name=...):
    """Get hooks via `app/hooks.py`

    :param hook: Name of the hook. Will gather all hooks for this name and return as a list.
    :param default: Default if no hook found.
    :param app_name: Filter by app."""
    ...

def append_hook(target, key, value):
    """appends a hook to the the target dict.

    If the hook key, exists, it will make it a key.

    If the hook value is a dict, like doc_events, it will
    listify the values against the key.
    """
    ...

def setup_module_map():
    """Rebuild map of all modules (internal)."""
    ...

def get_file_items(path, raise_not_found=..., ignore_empty_lines=...):
    """Returns items from text file as a list. Ignores empty lines."""
    ...

def get_file_json(path):
    """Read a file and return parsed JSON object."""
    ...

def read_file(path, raise_not_found=...):
    """Open a file and return its content as Unicode."""
    ...

def get_attr(method_string):
    """Get python method object from its name."""
    ...

def call(fn, *args, **kwargs):
    """Call a function and match arguments."""
    ...

def get_newargs(fn, kwargs): ...
def make_property_setter(args, ignore_validate=..., validate_fields_for_doctype=...):
    """Create a new **Property Setter** (for overriding DocType and DocField properties).

    If doctype is not specified, it will create a property setter for all fields with the
    given fieldname"""
    ...

def import_doc(path):
    """Import a file using Data Import."""
    ...

def copy_doc(doc, ignore_no_copy=...):
    """No_copy fields also get copied."""
    ...

def compare(val1, condition, val2):
    """Compare two values using `frappe.utils.compare`

    `condition` could be:
    - "^"
    - "in"
    - "not in"
    - "="
    - "!="
    - ">"
    - "<"
    - ">="
    - "<="
    - "not None"
    - "None"
    """
    ...

def respond_as_web_page(
    title,
    html,
    success=...,
    http_status_code=...,
    context=...,
    indicator_color=...,
    primary_action=...,
    primary_label=...,
    fullpage=...,
    width=...,
    template=...,
):
    """Send response as a web page with a message rather than JSON. Used to show permission errors etc.

    :param title: Page title and heading.
    :param message: Message to be shown.
    :param success: Alert message.
    :param http_status_code: HTTP status code
    :param context: web template context
    :param indicator_color: color of indicator in title
    :param primary_action: route on primary button (default is `/`)
    :param primary_label: label on primary button (default is "Home")
    :param fullpage: hide header / footer
    :param width: Width of message in pixels
    :param template: Optionally pass view template
    """
    ...

def redirect_to_message(
    title, html, http_status_code=..., context=..., indicator_color=...
):
    """Redirects to /message?id=random
    Similar to respond_as_web_page, but used to 'redirect' and show message pages like success, failure, etc. with a detailed message

    :param title: Page title and heading.
    :param message: Message to be shown.
    :param http_status_code: HTTP status code.

    Example Usage:
            frappe.redirect_to_message(_('Thank you'), "<div><p>You will receive an email at test@example.com</p></div>")

    """
    ...

def build_match_conditions(doctype, as_condition=...):
    """Return match (User permissions) for given doctype as list or SQL."""
    ...

def get_list(doctype, *args, **kwargs):
    """List database query via `frappe.model.db_query`. Will also check for permissions.

    :param doctype: DocType on which query is to be made.
    :param fields: List of fields or `*`.
    :param filters: List of filters (see example).
    :param order_by: Order By e.g. `modified desc`.
    :param limit_page_start: Start results at record #. Default 0.
    :param limit_page_length: No of records in the page. Default 20.

    Example usage:

            # simple dict filter
            frappe.get_list("ToDo", fields=["name", "description"], filters = {"owner":"test@example.com"})

            # filter as a list of lists
            frappe.get_list("ToDo", fields="*", filters = [["modified", ">", "2014-01-01"]])

            # filter as a list of dicts
            frappe.get_list("ToDo", fields="*", filters = {"description": ("like", "test%")})
    """
    ...

def get_all(doctype, *args, **kwargs):
    """List database query via `frappe.model.db_query`. Will **not** check for permissions.
    Parameters are same as `frappe.get_list`

    :param doctype: DocType on which query is to be made.
    :param fields: List of fields or `*`. Default is: `["name"]`.
    :param filters: List of filters (see example).
    :param order_by: Order By e.g. `modified desc`.
    :param limit_start: Start results at record #. Default 0.
    :param limit_page_length: No of records in the page. Default 20.

    Example usage:

            # simple dict filter
            frappe.get_all("ToDo", fields=["name", "description"], filters = {"owner":"test@example.com"})

            # filter as a list of lists
            frappe.get_all("ToDo", fields=["*"], filters = [["modified", ">", "2014-01-01"]])

            # filter as a list of dicts
            frappe.get_all("ToDo", fields=["*"], filters = {"description": ("like", "test%")})
    """
    ...

def get_value(*args, **kwargs):
    """Returns a document property or list of properties.

    Alias for `frappe.db.get_value`

    :param doctype: DocType name.
    :param filters: Filters like `{"x":"y"}` or name of the document. `None` if Single DocType.
    :param fieldname: Column name.
    :param ignore: Don't raise exception if table, column is missing.
    :param as_dict: Return values as dict.
    :param debug: Print query in error log.
    """
    ...

def as_json(obj, indent=...): ...
def are_emails_muted(): ...
def get_test_records(doctype):
    """Returns list of objects from `test_records.json` in the given doctype's folder."""
    ...

def format_value(*args, **kwargs):
    """Format value with given field properties.

    :param value: Value to be formatted.
    :param df: (Optional) DocField object with properties `fieldtype`, `options` etc."""
    ...

def format(*args, **kwargs):
    """Format value with given field properties.

    :param value: Value to be formatted.
    :param df: (Optional) DocField object with properties `fieldtype`, `options` etc."""
    ...

def get_print(
    doctype=...,
    name=...,
    print_format=...,
    style=...,
    html=...,
    as_pdf=...,
    doc=...,
    output=...,
    no_letterhead=...,
    password=...,
):
    """Get Print Format for given document.

    :param doctype: DocType of document.
    :param name: Name of document.
    :param print_format: Print Format name. Default 'Standard',
    :param style: Print Format style.
    :param as_pdf: Return as PDF. Default False.
    :param password: Password to encrypt the pdf with. Default None"""
    ...

def attach_print(
    doctype,
    name,
    file_name=...,
    print_format=...,
    style=...,
    html=...,
    doc=...,
    lang=...,
    print_letterhead=...,
    password=...,
): ...
def publish_progress(*args, **kwargs):
    """Show the user progress for a long request

    :param percent: Percent progress
    :param title: Title
    :param doctype: Optional, for document type
    :param docname: Optional, for document name
    :param description: Optional description
    """
    ...

def publish_realtime(*args, **kwargs):
    """Publish real-time updates

    :param event: Event name, like `task_progress` etc.
    :param message: JSON message object. For async must contain `task_id`
    :param room: Room in which to publish update (default entire site)
    :param user: Transmit to user
    :param doctype: Transmit to doctype, docname
    :param docname: Transmit to doctype, docname
    :param after_commit: (default False) will emit after current transaction is committed
    """
    ...

def local_cache(namespace, key, generator, regenerate_if_none=...):
    """A key value store for caching within a request

    :param namespace: frappe.local.cache[namespace]
    :param key: frappe.local.cache[namespace][key] used to retrieve value
    :param generator: method to generate a value if not found in store

    """
    ...

def enqueue(*args, **kwargs):
    """
    Enqueue method to be executed using a background worker

    :param method: method string or method object
    :param queue: (optional) should be either long, default or short
    :param timeout: (optional) should be set according to the functions
    :param event: this is passed to enable clearing of jobs from queues
    :param is_async: (optional) if is_async=False, the method is executed immediately, else via a worker
    :param job_name: (optional) can be used to name an enqueue call, which can be used to prevent duplicate calls
    :param kwargs: keyword arguments to be passed to the method
    """
    ...

def enqueue_doc(*args, **kwargs):
    """
    Enqueue method to be executed using a background worker

    :param doctype: DocType of the document on which you want to run the event
    :param name: Name of the document on which you want to run the event
    :param method: method string or method object
    :param queue: (optional) should be either long, default or short
    :param timeout: (optional) should be set according to the functions
    :param kwargs: keyword arguments to be passed to the method
    """
    ...

def get_doctype_app(doctype): ...

loggers = ...
log_level = ...

def logger(
    module=...,
    with_more_info=...,
    allow_site=...,
    filter=...,
    max_size=...,
    file_count=...,
):
    """Returns a python logger that uses StreamHandler"""
    ...

def log_error(message=..., title=...):
    """Log error to Error Log"""
    ...

def get_desk_link(doctype, name): ...
def bold(text): ...
def safe_eval(code, eval_globals=..., eval_locals=...):
    """A safer `eval`"""
    ...

def get_system_settings(key): ...
def get_active_domains(): ...
def get_version(doctype, name, limit=..., head=..., raise_err=...):
    """
    Returns a list of version information of a given DocType.

    Note: Applicable only if DocType has changes tracked.

    Example
    >>> frappe.get_version('User', 'foobar@gmail.com')
    >>>
    [
            {
                    "version": [version.data],			# Refer Version DocType get_diff method and data attribute
                    "user": "admin@gmail.com",			# User that created this version
                    "creation": <datetime.datetime>		# Creation timestamp of that object.
            }
    ]
    """
    ...

@whitelist(allow_guest=True)
def ping(): ...
def safe_encode(param, encoding=...): ...
def safe_decode(param, encoding=...): ...
def parse_json(val): ...
def mock(type, size=..., locale=...): ...
def validate_and_sanitize_search_inputs(fn): ...
