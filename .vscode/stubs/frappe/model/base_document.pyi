"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""
max_positive_value = ...
DOCTYPES_FOR_DOCTYPE = ...

def get_controller(doctype):
    """Returns the **class** object of the given DocType.
    For `custom` type, returns `frappe.model.document.Document`.

    :param doctype: DocType name as string."""
    ...

class BaseDocument:
    ignore_in_getter = ...
    def __init__(self, d) -> None: ...
    @property
    def meta(self): ...
    def update(self, d):
        """Update multiple fields of a doctype using a dictionary of key-value pairs.

        Example:
                doc.update({
                        "user": "admin",
                        "balance": 42000
                })
        """
        ...
    def update_if_missing(self, d): ...
    def get_db_value(self, key): ...
    def get(self, key=..., filters=..., limit=..., default=...): ...
    def getone(self, key, filters=...): ...
    def set(self, key, value, as_value=...): ...
    def delete_key(self, key): ...
    def append(self, key, value=...):
        """Append an item to a child table.

        Example:
                doc.append("childtable", {
                        "child_table_field": "value",
                        "child_table_int_field": 0,
                        ...
                })
        """
        ...
    def extend(self, key, value): ...
    def remove(self, doc): ...
    def get_valid_dict(
        self, sanitize=..., convert_dates_to_str=..., ignore_nulls=...
    ): ...
    def init_valid_columns(self): ...
    def get_valid_columns(self): ...
    def is_new(self): ...
    def as_dict(
        self, no_nulls=..., no_default_fields=..., convert_dates_to_str=...
    ): ...
    def as_json(self): ...
    def get_table_field_doctype(self, fieldname): ...
    def get_parentfield_of_doctype(self, doctype): ...
    def db_insert(self):
        """INSERT the document (with valid columns) in the database."""
        ...
    def db_update(self): ...
    def db_update_all(self):
        """Raw update parent + children
        DOES NOT VALIDATE AND CALL TRIGGERS"""
        ...
    def show_unique_validation_message(self, e): ...
    def get_field_name_by_key_name(self, key_name):
        """MariaDB stores a mapping between `key_name` and `column_name`.
        This function returns the `column_name` associated with the `key_name` passed

        Args:
                key_name (str): The name of the database index.

        Raises:
                IndexError: If the key is not found in the table.

        Returns:
                str: The column name associated with the key.
        """
        ...
    def get_label_from_fieldname(self, fieldname):
        """Returns the associated label for fieldname

        Args:
                fieldname (str): The fieldname in the DocType to use to pull the label.

        Returns:
                str: The label associated with the fieldname, if found, otherwise `None`.
        """
        ...
    def update_modified(self):
        """Update modified timestamp"""
        ...
    def get_invalid_links(self, is_submittable=...):
        """Returns list of invalid links and also updates fetch values if not set"""
        ...
    def set_fetch_from_value(self, doctype, df, values): ...
    def throw_length_exceeded_error(self, df, max_length, value): ...
    def get_password(self, fieldname=..., raise_exception=...): ...
    def is_dummy_password(self, pwd): ...
    def precision(self, fieldname, parentfield=...):
        """Returns float precision for a particular field (or get global default).

        :param fieldname: Fieldname for which precision is required.
        :param parentfield: If fieldname is in child table."""
        ...
    def get_formatted(
        self, fieldname, doc=..., currency=..., absolute_value=..., translated=...
    ): ...
    def is_print_hide(self, fieldname, df=..., for_print=...):
        """Returns true if fieldname is to be hidden for print.

        Print Hide can be set via the Print Format Builder or in the controller as a list
        of hidden fields. Example

                class MyDoc(Document):
                        def __setup__(self):
                                self.print_hide = ["field1", "field2"]

        :param fieldname: Fieldname to be checked if hidden.
        """
        ...
    def in_format_data(self, fieldname):
        """Returns True if shown via Print Format::`format_data` property.
        Called from within standard print format."""
        ...
    def reset_values_if_no_permlevel_access(self, has_access_to, high_permlevel_fields):
        """If the user does not have permissions at permlevel > 0, then reset the values to original / default"""
        ...
    def get_value(self, fieldname): ...
    def cast(self, value, df): ...
