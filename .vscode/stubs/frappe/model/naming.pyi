"""
This type stub file was generated by pyright.
"""

def set_new_name(doc):  # -> None:
    """
    Sets the `name` property for the document based on various rules.

    1. If amended doc, set suffix.
    2. If `autoname` method is declared, then call it.
    3. If `autoname` property is set in the DocType (`meta`), then build it using the `autoname` property.
    4. If no rule defined, use hash.

    :param doc: Document to be named.
    """
    ...

def set_name_from_naming_options(autoname, doc):  # -> None:
    """
    Get a name based on the autoname field option
    """
    ...

def set_naming_from_document_naming_rule(doc):  # -> None:
    """
    Evaluate rules based on "Document Naming Series" doctype
    """
    ...

def set_name_by_naming_series(doc):  # -> None:
    """Sets name by the `naming_series` property"""
    ...

def make_autoname(key=..., doctype=..., doc=...):  # -> Literal['']:
    """
         Creates an autoname from the given key:

         **Autoname rules:**

                  * The key is separated by '.'
                  * '####' represents a series. The string before this part becomes the prefix:
                         Example: ABC.#### creates a series ABC0001, ABC0002 etc
                  * 'MM' represents the current month
                  * 'YY' and 'YYYY' represent the current year


    *Example:*

                  * DE/./.YY./.MM./.##### will create a series like
                    DE/09/01/0001 where 09 is the year, 01 is the month and 0001 is the series
    """
    ...

def parse_naming_series(parts, doctype=..., doc=...): ...
def getseries(key, digits): ...
def revert_series_if_last(key, name, doc=...): ...
def get_default_naming_series(doctype):  # -> None:
    """get default value for `naming_series` property"""
    ...

def validate_name(doctype, name, case=..., merge=...): ...
def append_number_if_name_exists(
    doctype, value, fieldname=..., separator=..., filters=...
): ...
