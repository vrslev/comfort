"""
This type stub file was generated by pyright.
"""

import pymysql

from frappe.database.database import Database

"""
This type stub file was generated by pyright.
"""

class MariaDBDatabase(Database):
    ProgrammingError = pymysql.err.ProgrammingError
    TableMissingError = pymysql.err.ProgrammingError
    OperationalError = pymysql.err.OperationalError
    InternalError = pymysql.err.InternalError
    SQLError = pymysql.err.ProgrammingError
    DataError = pymysql.err.DataError
    REGEX_CHARACTER = ...
    def setup_type_map(self): ...
    def get_connection(self): ...
    def get_database_size(self):
        """'Returns database size in MB"""
        ...
    @staticmethod
    def escape(s, percent=...):
        """Excape quotes and percent in given string."""
        ...
    @staticmethod
    def is_type_number(code): ...
    @staticmethod
    def is_type_datetime(code): ...
    @staticmethod
    def is_deadlocked(e): ...
    @staticmethod
    def is_timedout(e): ...
    @staticmethod
    def is_table_missing(e): ...
    @staticmethod
    def is_missing_column(e): ...
    @staticmethod
    def is_duplicate_fieldname(e): ...
    @staticmethod
    def is_duplicate_entry(e): ...
    @staticmethod
    def is_access_denied(e): ...
    @staticmethod
    def cant_drop_field_or_key(e): ...
    @staticmethod
    def is_syntax_error(e): ...
    @staticmethod
    def is_data_too_long(e): ...
    def is_primary_key_violation(self, e): ...
    def is_unique_key_violation(self, e): ...
    def create_auth_table(self): ...
    def create_global_search_table(self): ...
    def create_user_settings_table(self): ...
    def create_help_table(self): ...
    @staticmethod
    def get_on_duplicate_update(key=...): ...
    def get_table_columns_description(self, table_name):
        """Returns list of column and its description"""
        ...
    def has_index(self, table_name, index_name): ...
    def add_index(self, doctype, fields, index_name=...):
        """Creates an index with given fields if not already created.
        Index name will be `fieldname1_fieldname2_index`"""
        ...
    def add_unique(self, doctype, fields, constraint_name=...): ...
    def updatedb(self, doctype, meta=...):
        """
        Syncs a `DocType` to the table
        * creates if required
        * updates columns
        * updates indices
        """
        ...
    def get_database_list(self, target): ...
