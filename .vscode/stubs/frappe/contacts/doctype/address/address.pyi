"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class Address(Document):
    def __setup__(self): ...
    def autoname(self): ...
    def validate(self): ...
    def link_address(self):  # -> bool:
        """Link address based on owner"""
        ...
    def validate_preferred_address(self): ...
    def get_display(self): ...
    def has_link(self, doctype, name): ...
    def has_common_link(self, doc): ...

def get_preferred_address(doctype, name, preferred_key=...): ...
@frappe.whitelist()
def get_default_address(doctype, name, sort_key=...):  # -> None:
    """Returns default Address name for the given doctype, name"""
    ...

@frappe.whitelist()
def get_address_display(address_dict): ...
def get_territory_from_address(
    address,
):  # -> _dict | map[Unknown | None] | list[Unknown] | None:
    """Tries to match city, state and country of address to existing territory"""
    ...

def get_list_context(context=...): ...
def get_address_list(
    doctype, txt, filters, limit_start, limit_page_length=..., order_by=...
): ...
def has_website_permission(doc, ptype, user, verbose=...):  # -> Literal[False]:
    """Returns true if there is a related lead or contact related to this document"""
    ...

def get_address_templates(address): ...
def get_company_address(company): ...
@frappe.whitelist()
@frappe.validate_and_sanitize_search_inputs
def address_query(doctype, txt, searchfield, start, page_len, filters): ...
def get_condensed_address(doc): ...
def update_preferred_address(address, field): ...
