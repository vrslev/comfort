"""
This type stub file was generated by pyright.
"""

import frappe

def handle_not_exist(fn): ...

class Workspace:
    def __init__(self, page_name, minimal=...) -> None: ...
    def is_page_allowed(self): ...
    def get_cached(self, cache_key, fallback_fn): ...
    def get_can_read_items(self): ...
    def get_allowed_modules(self): ...
    def get_page_for_user(self): ...
    def get_onboarding_doc(self): ...
    def get_pages_to_extend(self): ...
    def is_item_allowed(self, name, item_type): ...
    def build_workspace(self): ...
    @handle_not_exist
    def get_links(self): ...
    @handle_not_exist
    def get_charts(self): ...
    @handle_not_exist
    def get_shortcuts(self): ...
    @handle_not_exist
    def get_onboarding_steps(self): ...

@frappe.whitelist()
@frappe.read_only()
def get_desktop_page(
    page,
):  # -> dict[str, dict[str, Unknown | list[Unknown]] | bool | None]:
    """Applies permissions, customizations and returns the configruration for a page
    on desk.

    Args:
            page (string): page name

    Returns:
            dict: dictionary of cards, charts and shortcuts to be displayed on website
    """
    ...

@frappe.whitelist()
def get_desk_sidebar_items():  # -> list[Unknown]:
    """Get list of sidebar items for desk"""
    ...

def get_table_with_counts(): ...
def get_custom_reports_and_doctypes(module): ...
def get_custom_doctype_list(module): ...
def get_custom_report_list(module):  # -> list[Unknown]:
    """Returns list on new style reports for modules."""
    ...

def get_custom_workspace_for_user(page):
    """Get custom page from workspace if exists or create one

    Args:
            page (stirng): Page name

    Returns:
            Object: Document object
    """
    ...

@frappe.whitelist()
def save_customization(page, config):  # -> bool:
    """Save customizations as a separate doctype in Workspace per user

    Args:
            page (string): Name of the page to be edited
            config (dict): Dictionary config of al widgets

    Returns:
            Boolean: Customization saving status
    """
    ...

def prepare_widget(config, doctype, parentfield):  # -> list[Unknown]:
    """Create widget child table entries with parent details

    Args:
            config (dict): Dictionary containing widget config
            doctype (string): Doctype name of the child table
            parentfield (string): Parent field for the child table

    Returns:
            TYPE: List of Document objects
    """
    ...

@frappe.whitelist()
def update_onboarding_step(name, field, value):  # -> None:
    """Update status of onboaridng step

    Args:
        name (string): Name of the doc
        field (string): field to be updated
        value: Value to be updated

    """
    ...

@frappe.whitelist()
def reset_customization(page):  # -> None:
    """Reset workspace customizations for a user

    Args:
            page (string): Name of the page to be reset
    """
    ...

def merge_cards_based_on_label(cards):  # -> list[Unknown]:
    """Merge cards with common label."""
    ...
