"""
This type stub file was generated by pyright.
"""

import frappe

@frappe.whitelist()
def get_submitted_linked_docs(
    doctype, name, docs=..., visited=...
):  # -> dict[str, Unknown | int | list[Unknown]] | None:
    """
    Get all nested submitted linked doctype linkinfo

    Arguments:
            doctype (str) - The doctype for which get all linked doctypes
            name (str) - The docname for which get all linked doctypes

    Keyword Arguments:
            docs (list of dict) - (Optional) Get list of dictionary for linked doctype.

    Returns:
            dict - Return list of documents and link count
    """
    ...

@frappe.whitelist()
def cancel_all_linked_docs(docs, ignore_doctypes_on_cancel_all=...):  # -> None:
    """
    Cancel all linked doctype, optionally ignore doctypes specified in a list.

    Arguments:
            docs (json str) - It contains list of dictionaries of a linked documents.
            ignore_doctypes_on_cancel_all (list) - List of doctypes to ignore while cancelling.
    """
    ...

def validate_linked_doc(docinfo, ignore_doctypes_on_cancel_all=...):  # -> bool:
    """
    Validate a document to be submitted and non-exempted from auto-cancel.

    Arguments:
            docinfo (dict): The document to check for submitted and non-exempt from auto-cancel
            ignore_doctypes_on_cancel_all (list) - List of doctypes to ignore while cancelling.

    Returns:
            bool: True if linked document passes all validations, else False
    """
    ...

def get_exempted_doctypes():  # -> list[Unknown]:
    """Get list of doctypes exempted from being auto-cancelled"""
    ...

@frappe.whitelist()
def get_linked_docs(doctype, name, linkinfo=..., for_doctype=...): ...
@frappe.whitelist()
def get_linked_doctypes(doctype, without_ignore_user_permissions_enabled=...):
    """add list of doctypes this doctype is 'linked' with.

    Example, for Customer:

            {"Address": {"fieldname": "customer"}..}
    """
    ...

def get_linked_fields(doctype, without_ignore_user_permissions_enabled=...): ...
def get_dynamic_linked_fields(doctype, without_ignore_user_permissions_enabled=...): ...
