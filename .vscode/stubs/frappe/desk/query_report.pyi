"""
This type stub file was generated by pyright.
"""

import frappe

def get_report_doc(report_name): ...
def generate_report_result(report, filters=..., user=..., custom_columns=...): ...
def normalize_result(result, columns): ...
@frappe.whitelist()
def background_enqueue_run(
    report_name, filters=..., user=...
):  # -> dict[str, Unknown | str]:
    """run reports in background"""
    ...

@frappe.whitelist()
def get_script(report_name): ...
@frappe.whitelist()
@frappe.read_only()
def run(
    report_name, filters=..., user=..., ignore_prepared_report=..., custom_columns=...
): ...
def add_custom_column_data(custom_columns, result): ...
def get_prepared_report_result(report, filters, dn=..., user=...): ...
@frappe.whitelist()
def export_query():  # -> None:
    """export from query reports"""
    ...

def handle_duration_fieldtype_values(result, columns): ...
def build_xlsx_data(columns, data, visible_idx, include_indentation): ...
def add_total_row(result, columns, meta=...): ...
@frappe.whitelist()
def get_data_for_custom_field(doctype, fieldname, field=...): ...
def get_data_for_custom_report(columns): ...
@frappe.whitelist()
def save_report(reference_report, report_name, columns): ...
def get_filtered_data(ref_doctype, columns, data, user): ...
def has_match(
    row,
    linked_doctypes,
    doctype_match_filters,
    ref_doctype,
    if_owner,
    columns_dict,
    user,
):  # -> bool:
    """Returns True if after evaluating permissions for each linked doctype
    - There is an owner match for the ref_doctype
    - `and` There is a user permission match for all linked doctypes

    Returns True if the row is empty

    Note:
    Each doctype could have multiple conflicting user permission doctypes.
    Hence even if one of the sets allows a match, it is true.
    This behavior is equivalent to the trickling of user permissions of linked doctypes to the ref doctype.
    """
    ...

def get_linked_doctypes(columns, data): ...
def get_columns_dict(columns):
    """Returns a dict with column docfield values as dict
    The keys for the dict are both idx and fieldname,
    so either index or fieldname can be used to search for a column's docfield properties
    """
    ...

def get_column_as_dict(col): ...
def get_user_match_filters(doctypes, user): ...
