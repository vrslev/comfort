"""
This type stub file was generated by pyright.
"""

import frappe

def export_module_json(doc, is_standard, module):  # -> str | None:
    """Make a folder for the given doc and add its json file (make it a standard
    object that will be synced)"""
    ...

def get_doc_module(module, doctype, name):
    """Get custom module for given document"""
    ...

@frappe.whitelist()
def export_customizations(
    module, doctype, sync_on_migrate=..., with_permissions=...
):  # -> None:
    """Export Custom Field and Property Setter for the current document to the app folder.
    This will be synced with bench migrate"""
    ...

def sync_customizations(app=...):  # -> None:
    """Sync custom fields and property setters from custom folder in each app module"""
    ...

def sync_customizations_for_doctype(data, folder):  # -> None:
    """Sync doctype customzations for a particular data set"""
    ...

def scrub(txt): ...
def scrub_dt_dn(dt, dn):  # -> tuple[Unknown, Unknown]:
    """Returns in lowercase and code friendly names of doctype and name for certain types"""
    ...

def get_module_path(module):
    """Returns path of the given module"""
    ...

def get_doc_path(module, doctype, name): ...
def reload_doc(module, dt=..., dn=..., force=..., reset_permissions=...): ...
def export_doc(doctype, name, module=...):  # -> None:
    """Write a doc to standard path."""
    ...

def get_doctype_module(doctype):
    """Returns **Module Def** name of given doctype."""
    ...

doctype_python_modules = ...

def load_doctype_module(doctype, module=..., prefix=..., suffix=...):
    """Returns the module object for given doctype."""
    ...

def get_module_name(doctype, module, prefix=..., suffix=..., app=...): ...
def get_module_app(module): ...
def get_app_publisher(module): ...
def make_boilerplate(template, doc, opts=...): ...
