"""
This type stub file was generated by pyright.
"""

rights = ...

def check_admin_or_system_manager(user=...): ...
def print_has_permission_check_logs(func): ...
@print_has_permission_check_logs
def has_permission(
    doctype, ptype=..., doc=..., verbose=..., user=..., raise_exception=...
):  # -> bool | int:
    """Returns True if user has permission `ptype` for given `doctype`.
    If `doc` is passed, it also checks user, share and owner permissions.

    Note: if Table DocType is passed, it always returns True.
    """
    ...

def get_doc_permissions(
    doc, user=..., ptype=...
):  # -> dict[str, int] | dict[Unknown, int] | int:
    """Returns a dict of evaluated permissions for given `doc` like `{"read":1, "write":1}`"""
    ...

def get_role_permissions(doctype_meta, user=..., is_owner=...):  # -> dict[str, int]:
    """
    Returns dict of evaluated role permissions like
            {
                    "read": 1,
                    "write": 0,
                    // if "if_owner" is enabled
                    "if_owner":
                            {
                                    "read": 1,
                                    "write": 0
                            }
            }
    """
    ...

def get_user_permissions(user): ...
def has_user_permission(doc, user=...):  # -> bool:
    """Returns True if User is allowed to view considering User Permissions"""
    ...

def has_controller_permissions(doc, ptype, user=...):  # -> None:
    """Returns controller permissions if defined. None if not defined"""
    ...

def get_doctypes_with_read(): ...
def get_valid_perms(doctype=..., user=...):  # -> list[Unknown]:
    """Get valid permissions for the current user from DocPerm and Custom DocPerm"""
    ...

def get_all_perms(role):
    """Returns valid permissions for a given role"""
    ...

def get_roles(user=..., with_standard=...):  # -> list[str] | filter[Unknown]:
    """get roles of current user"""
    ...

def get_doctype_roles(doctype, access_type=...):  # -> list[Unknown]:
    """Returns a list of roles that are allowed to access passed doctype."""
    ...

def get_perms_for(roles, perm_doctype=...):
    """Get perms for given roles"""
    ...

def get_doctypes_with_custom_docperms():  # -> list[Unknown]:
    """Returns all the doctypes with Custom Docperms"""
    ...

def can_set_user_permissions(doctype, docname=...): ...
def set_user_permission_if_allowed(doctype, name, user, with_message=...): ...
def add_user_permission(
    doctype,
    name,
    user,
    ignore_permissions=...,
    applicable_for=...,
    is_default=...,
    hide_descendants=...,
):  # -> None:
    """Add user permission"""
    ...

def remove_user_permission(doctype, name, user): ...
def clear_user_permissions_for_doctype(doctype, user=...): ...
def can_import(doctype, raise_exception=...): ...
def can_export(doctype, raise_exception=...): ...
def update_permission_property(
    doctype, role, permlevel, ptype, value=..., validate=...
):  # -> Literal[True] | None:
    """Update a property in Custom Perm"""
    ...

def setup_custom_perms(parent):  # -> Literal[True] | None:
    """if custom permssions are not setup for the current doctype, set them up"""
    ...

def add_permission(doctype, role, permlevel=..., ptype=...):  # -> None:
    """Add a new permission rule to the given doctype
    for the given Role and Permission Level"""
    ...

def copy_perms(parent):  # -> None:
    """Copy all DocPerm in to Custom DocPerm for the given document"""
    ...

def reset_perms(doctype):  # -> None:
    """Reset permissions for given doctype."""
    ...

def get_linked_doctypes(dt): ...
def get_doc_name(doc): ...
def allow_everything():  # -> dict[str, int]:
    """
    returns a dict with access to everything
    eg. {"read": 1, "write": 1, ...}
    """
    ...

def get_allowed_docs_for_doctype(
    user_permissions, doctype
):  # -> tuple[list[Unknown], Unknown | None] | list[Unknown]:
    """Returns all the docs from the passed user_permissions that are
    allowed under provided doctype"""
    ...

def filter_allowed_docs_for_doctype(
    user_permissions, doctype, with_default_doc=...
):  # -> tuple[list[Unknown], Unknown | None] | list[Unknown]:
    """Returns all the docs from the passed user_permissions that are
    allowed under provided doctype along with default doc value if with_default_doc is set"""
    ...

def push_perm_check_log(log): ...
