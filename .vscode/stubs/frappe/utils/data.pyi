"""
This type stub file was generated by pyright.
"""

from six import text_type

DATE_FORMAT = ...
TIME_FORMAT = ...
DATETIME_FORMAT = ...

def is_invalid_date_string(date_string): ...
def getdate(string_date=...):  # -> _date | None:
    """
    Converts string date (yyyy-mm-dd) to datetime.date object.
    If no input is provided, current date is returned.
    """
    ...

def get_datetime(datetime_str=...): ...
def to_timedelta(time_str): ...
def add_to_date(
    date,
    years=...,
    months=...,
    weeks=...,
    days=...,
    hours=...,
    minutes=...,
    seconds=...,
    as_string=...,
    as_datetime=...,
):
    """Adds `days` to the given date"""
    ...

def add_days(date, days): ...
def add_months(date, months): ...
def add_years(date, years): ...
def date_diff(string_ed_date, string_st_date): ...
def month_diff(string_ed_date, string_st_date): ...
def time_diff(string_ed_date, string_st_date): ...
def time_diff_in_seconds(string_ed_date, string_st_date): ...
def time_diff_in_hours(string_ed_date, string_st_date): ...
def now_datetime(): ...
def get_timestamp(date): ...
def get_eta(from_time, percent_complete): ...
def get_time_zone(): ...
def convert_utc_to_timezone(utc_timestamp, time_zone): ...
def get_datetime_in_timezone(time_zone): ...
def convert_utc_to_user_timezone(utc_timestamp): ...
def now():  # -> str:
    """return current datetime as yyyy-mm-dd hh:mm:ss"""
    ...

def nowdate():  # -> str:
    """return current date as yyyy-mm-dd"""
    ...

def today(): ...
def get_abbr(string, max_len=...): ...
def nowtime():  # -> str:
    """return current time in hh:mm"""
    ...

def get_first_day(dt, d_years=..., d_months=..., as_str=...):  # -> str | date:
    """
    Returns the first day of the month for the date specified by date object
    Also adds `d_years` and `d_months` if specified
    """
    ...

def get_quarter_start(dt, as_str=...): ...
def get_first_day_of_week(dt, as_str=...): ...
def get_year_start(dt, as_str=...): ...
def get_last_day_of_week(dt): ...
def get_last_day(dt):
    """
    Returns last day of the month using:
    `get_first_day(dt, 0, 1) + datetime.timedelta(-1)`
    """
    ...

def get_quarter_ending(date): ...
def get_year_ending(date):
    """returns year ending of the given date"""
    ...

def get_time(time_str): ...
def get_datetime_str(datetime_obj): ...
def get_date_str(date_obj): ...
def get_time_str(timedelta_obj): ...
def get_user_date_format():  # -> list[Unknown] | Literal['yyyy-mm-dd']:
    """Get the current user date format. The result will be cached."""
    ...

get_user_format = ...

def get_user_time_format():  # -> list[Unknown] | Literal['HH:mm:ss']:
    """Get the current user time format. The result will be cached."""
    ...

def format_date(string_date=..., format_string=...):  # -> _NotImplementedType | str:
    """Converts the given string date to :data:`user_date_format`
    User format specified in defaults

    Examples:

    * dd-mm-yyyy
    * mm-dd-yyyy
    * dd/mm/yyyy
    """
    ...

formatdate = ...

def format_time(time_string=..., format_string=...):  # -> _NotImplementedType | str:
    """Converts the given string time to :data:`user_time_format`
    User format specified in defaults

    Examples:

    * HH:mm:ss
    * HH:mm
    """
    ...

def format_datetime(
    datetime_string, format_string=...
):  # -> _NotImplementedType | str | None:
    """Converts the given string time to :data:`user_datetime_format`
    User format specified in defaults

    Examples:

    * dd-mm-yyyy HH:mm:ss
    * mm-dd-yyyy HH:mm
    """
    ...

def format_duration(seconds, hide_days=...):  # -> str:
    """Converts the given duration value in float(seconds) to duration format

    example: converts 12885 to '3h 34m 45s' where 12885 = seconds in float
    """
    ...

def duration_to_seconds(duration):  # -> int:
    """Converts the given duration formatted value to duration value in seconds

    example: converts '3h 34m 45s' to 12885 (value in seconds)
    """
    ...

def validate_duration_format(duration): ...
def get_weekdays(): ...
def get_weekday(datetime=...): ...
def get_timespan_date_range(timespan): ...
def global_date_format(date, format=...):  # -> _NotImplementedType:
    """returns localized date in the form of January 1, 2012"""
    ...

def has_common(l1, l2):  # -> Set[Unknown]:
    """Returns truthy value if there are common elements in lists l1 and l2"""
    ...

def cast_fieldtype(fieldtype, value): ...
def flt(s, precision=...):  # -> Any | int | float:
    """Convert to float (ignoring commas in string)

    :param s: Number in string or other numeric format.
    :param precision: optional argument to specify precision for rounding.
    :returns: Converted number in python float type.

    Returns 0 if input can not be converted to float.

    Examples:

    >>> flt("43.5", precision=0)
    44
    >>> flt("42.5", precision=0)
    42
    >>> flt("10,500.5666", precision=2)
    10500.57
    >>> flt("a")
    0.0
    """
    ...

def cint(s, default=...):  # -> int:
    """Convert to integer

    :param s: Number in string or other numeric format.
    :returns: Converted number in python integer type.

    Returns default if input can not be converted to integer.

    Examples:
    >>> cint("100")
    100
    >>> cint("a")
    0

    """
    ...

def floor(s):  # -> int:
    """
    A number representing the largest integer less than or equal to the specified number

    Parameters
    ----------
    s : int or str or Decimal object
            The mathematical value to be floored

    Returns
    -------
    int
            number representing the largest integer less than or equal to the specified number

    """
    ...

def ceil(s):  # -> int:
    """
    The smallest integer greater than or equal to the given number

    Parameters
    ----------
    s : int or str or Decimal object
            The mathematical value to be ceiled

    Returns
    -------
    int
            smallest integer greater than or equal to the given number

    """
    ...

def cstr(s, encoding=...): ...
def sbool(x):  # -> bool:
    """Converts str object to Boolean if possible.
    Example:
            "true" becomes True
            "1" becomes True
            "{}" remains "{}"

    Args:
            x (str): String to be converted to Bool

    Returns:
            object: Returns Boolean or type(x)
    """
    ...

def rounded(num, precision=...):  # -> Any | int:
    """round method for round halfs to nearest even algorithm aka banker's rounding - compatible with python3"""
    ...

def remainder(numerator, denominator, precision=...): ...
def safe_div(numerator, denominator, precision=...):  # -> Any | int | float:
    """
    SafeMath division that returns zero when divided by zero.
    """
    ...

def round_based_on_smallest_currency_fraction(value, currency, precision=...): ...
def encode(obj, encoding=...): ...
def parse_val(v):  # -> text_type | int:
    """Converts to simple datatypes from SQL query results"""
    ...

def fmt_money(amount, precision=..., currency=...):
    """
    Convert to string with commas for thousands, millions etc
    """
    ...

number_format_info = ...

def get_number_format_info(format): ...
def money_in_words(number, main_currency=..., fraction_currency=...):  # -> Literal['']:
    """
    Returns string in words with currency and fraction currency.
    """
    ...

def in_words(integer, in_million=...):  # -> str | Any:
    """
    Returns string in words for the given integer.
    """
    ...

def is_html(text): ...
def is_image(filepath): ...
def get_thumbnail_base64_for_image(src): ...
def image_to_base64(image, extn): ...

_striptags_re = ...

def strip_html(text):  # -> str:
    """removes anything enclosed in and including <>"""
    ...

def escape_html(text): ...
def pretty_date(iso_datetime):  # -> str:
    """
    Takes an ISO time and returns a string representing how
    long ago the date represents.
    Ported from PrettyDate by John Resig
    """
    ...

def comma_or(some_list, add_quotes=...): ...
def comma_and(some_list, add_quotes=...): ...
def comma_sep(some_list, pattern, add_quotes=...): ...
def new_line_sep(some_list): ...
def filter_strip_join(some_list, sep):
    """given a list, filter None values, strip spaces and join"""
    ...

def get_url(
    uri=..., full_address=...
):  # -> _dict | list[Unknown] | map[Unknown | None] | Literal['http://localhost']:
    """get app url from request"""
    ...

def get_host_name_from_request(): ...
def url_contains_port(url): ...
def get_host_name(): ...
def get_link_to_form(doctype, name, label=...): ...
def get_link_to_report(name, label=..., report_type=..., doctype=..., filters=...): ...
def get_absolute_url(doctype, name): ...
def get_url_to_form(doctype, name): ...
def get_url_to_list(doctype): ...
def get_url_to_report(name, report_type=..., doctype=...): ...
def get_url_to_report_with_filters(name, filters, report_type=..., doctype=...): ...

operator_map = ...

def evaluate_filters(doc, filters):  # -> bool:
    """Returns true if doc matches filters"""
    ...

def compare(val1, condition, val2, fieldtype=...): ...
def get_filter(doctype, f, filters_config=...):  # -> _dict:
    """Returns a _dict like

    {
            "doctype":
            "fieldname":
            "operator":
            "value":
            "fieldtype":
    }
    """
    ...

def make_filter_tuple(doctype, key, value):  # -> list[Unknown] | list[Unknown | str]:
    """return a filter tuple like [doctype, key, operator, value]"""
    ...

def make_filter_dict(filters):  # -> _dict:
    """convert this [[doctype, key, operator, value], ..]
    to this { key: (operator, value), .. }
    """
    ...

def sanitize_column(column_name): ...
def scrub_urls(html): ...
def expand_relative_urls(html): ...
def quoted(url): ...
def quote_urls(html): ...
def unique(seq):  # -> list[Unknown]:
    """use this instead of list(set()) to preserve order of the original list.
    Thanks to Stackoverflow: http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-python-whilst-preserving-order"""
    ...

def strip(val, chars=...): ...
def to_markdown(html): ...
def md_to_html(markdown_text): ...
def markdown(markdown_text): ...
def is_subset(list_a, list_b):  # -> bool:
    """Returns whether list_a is a subset of list_b"""
    ...

def generate_hash(*args, **kwargs): ...
def guess_date_format(date_string): ...
def validate_json_string(string): ...
def get_user_info_for_avatar(user_id): ...

class UnicodeWithAttrs(text_type):
    def __init__(self, text) -> None: ...
