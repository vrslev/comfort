"""
This type stub file was generated by pyright.
"""

import redis

class RedisWrapper(redis.Redis):
    """Redis client that will automatically prefix conf.db_name"""

    def connected(self): ...
    def make_key(self, key, user=..., shared=...): ...
    def set_value(self, key, val, user=..., expires_in_sec=...):  # -> None:
        """Sets cache value.

        :param key: Cache key
        :param val: Value to be cached
        :param user: Prepends key with User
        :param expires_in_sec: Expire value of this key in X seconds
        """
        ...
    def get_value(self, key, generator=..., user=..., expires=...):  # -> Any | None:
        """Returns cache value. If not found and generator function is
                given, it will call the generator.

        :param key: Cache key.
        :param generator: Function to be called to generate a value if `None` is returned.
        :param expires: If the key is supposed to be with an expiry, don't store it in frappe.local
        """
        ...
    def get_all(self, key): ...
    def get_keys(self, key):  # -> List[Unknown]:
        """Return keys starting with `key`."""
        ...
    def delete_keys(self, key):  # -> None:
        """Delete keys with wildcard `*`."""
        ...
    def delete_key(self, *args, **kwargs): ...
    def delete_value(self, keys, user=..., make_keys=..., shared=...):  # -> None:
        """Delete value, list of values."""
        ...
    def lpush(self, key, value): ...
    def rpush(self, key, value): ...
    def lpop(self, key): ...
    def llen(self, key): ...
    def lrange(self, key, start, stop): ...
    def ltrim(self, key, start, stop): ...
    def hset(self, name, key, value, shared=...): ...
    def hgetall(self, name): ...
    def hget(self, name, key, generator=..., shared=...): ...
    def hdel(self, name, key, shared=...): ...
    def hdel_keys(self, name_starts_with, key):  # -> None:
        """Delete hash names with wildcard `*` and key"""
        ...
    def hkeys(self, name): ...
    def sadd(self, name, *values):  # -> None:
        """Add a member/members to a given set"""
        ...
    def srem(self, name, *values):  # -> None:
        """Remove a specific member/list of members from the set"""
        ...
    def sismember(self, name, value):  # -> bool:
        """Returns True or False based on if a given value is present in the set"""
        ...
    def spop(self, name):  # -> bytes | float | int | Text | None:
        """Removes and returns a random member from the set"""
        ...
    def srandmember(self, name, count=...):  # -> bytes | float | int | Text | None:
        """Returns a random member from the set"""
        ...
    def smembers(self, name):  # -> Set[Unknown]:
        """Return all members of the set"""
        ...
