"""
This type stub file was generated by pyright.
"""

import frappe

def setup_global_search_table():  # -> None:
    """
    Creates __global_search table
    :return:
    """
    ...

def reset():  # -> None:
    """
    Deletes all data in __global_search
    :return:
    """
    ...

def get_doctypes_with_global_search(with_child_tables=...):
    """
    Return doctypes with global search fields
    :param with_child_tables:
    :return:
    """
    ...

def rebuild_for_doctype(doctype):  # -> None:
    """
    Rebuild entries of doctype's documents in __global_search on change of
    searchable fields
    :param doctype: Doctype
    """
    ...

def delete_global_search_records_for_doctype(doctype): ...
def get_selected_fields(meta, global_search_fields): ...
def get_children_data(doctype, meta):  # -> tuple[Unknown, Unknown]:
    """
    Get all records from all the child tables of a doctype

    all_children = {
            "parent1": {
                    "child_doctype1": [
                            {
                                    "field1": val1,
                                    "field2": val2
                            }
                    ]
            }
    }

    """
    ...

def insert_values_for_multiple_docs(all_contents): ...
def update_global_search(doc):  # -> None:
    """
    Add values marked with `in_global_search` to
    `global_search_queue` from given doc
    :param doc: Document to be added to global search
    """
    ...

def update_global_search_for_all_web_pages(): ...
def get_routes_to_index(): ...
def add_route_to_global_search(route): ...
def get_formatted_value(value, field):
    """
    Prepare field from raw data
    :param value:
    :param field:
    :return:
    """
    ...

def sync_global_search():  # -> None:
    """
    Inserts / updates values from `global_search_queue` to __global_search.
    This is called via job scheduler
    :param flags:
    :return:
    """
    ...

def sync_value_in_queue(value): ...
def sync_value(value):  # -> None:
    """
    Sync a given document to global search
    :param value: dict of { doctype, name, content, published, title, route }
    """
    ...

def delete_for_document(doc):  # -> None:
    """
    Delete the __global_search entry of a document that has
    been deleted
    :param doc: Deleted document
    """
    ...

@frappe.whitelist()
def search(text, start=..., limit=..., doctype=...):  # -> list[Unknown]:
    """
    Search for given text in __global_search
    :param text: phrase to be searched
    :param start: start results at, default 0
    :param limit: number of results to return, default 20
    :return: Array of result objects
    """
    ...

@frappe.whitelist(allow_guest=True)
def web_search(text, scope=..., start=..., limit=...):  # -> List[Unknown]:
    """
    Search for given text in __global_search where published = 1
    :param text: phrase to be searched
    :param scope: search only in this route, for e.g /docs
    :param start: start results at, default 0
    :param limit: number of results to return, default 20
    :return: Array of result objects
    """
    ...

def get_distinct_words(text): ...
