"""
This type stub file was generated by pyright.
"""

import frappe

class HTTPRequest:
    def __init__(self) -> None: ...
    def validate_csrf_token(self): ...
    def set_lang(self): ...
    def get_db_name(self):
        """get database name from conf"""
        ...
    def connect(self, ac_name=...):  # -> None:
        """connect to db, from ac_name or db_name"""
        ...

class LoginManager:
    def __init__(self) -> None: ...
    @frappe.whitelist()
    def login(self): ...
    def post_login(self): ...
    def get_user_info(self, resume=...): ...
    def setup_boot_cache(self): ...
    def set_user_info(self, resume=...): ...
    def make_session(self, resume=...): ...
    def clear_active_sessions(self):  # -> None:
        """Clear other sessions of the current user if `deny_multiple_sessions` is not set"""
        ...
    def authenticate(self, user: str = ..., pwd: str = ...): ...
    def force_user_to_reset_password(self): ...
    def check_password(self, user, pwd):
        """check password"""
        ...
    def fail(self, message, user=...): ...
    def run_trigger(self, event=...): ...
    def validate_hour(self):  # -> None:
        """check if user is logging in during restricted hours"""
        ...
    def login_as_guest(self):  # -> None:
        """login as guest"""
        ...
    def login_as(self, user): ...
    def logout(self, arg=..., user=...): ...
    def clear_cookies(self): ...

class CookieManager:
    def __init__(self) -> None: ...
    def init_cookies(self): ...
    def set_cookie(
        self, key, value, expires=..., secure=..., httponly=..., samesite=...
    ): ...
    def delete_cookie(self, to_delete): ...
    def flush_cookies(self, response): ...

@frappe.whitelist()
def get_logged_user(): ...
def clear_cookies(): ...
def validate_ip_address(user):  # -> None:
    """check if IP Address is valid"""
    ...

def get_login_attempt_tracker(
    user_name: str, raise_locked_exception: bool = ...
):  # -> LoginAttemptTracker:
    """Get login attempt tracker instance.

    :param user_name: Name of the loggedin user
    :param raise_locked_exception: If set, raises an exception incase of user not allowed to login
    """
    ...

class LoginAttemptTracker:
    """Track login attemts of a user.

    Lock the account for s number of seconds if there have been n consecutive unsuccessful attempts to log in.
    """

    def __init__(
        self,
        user_name: str,
        max_consecutive_login_attempts: int = ...,
        lock_interval: int = ...,
    ) -> None:
        """Initialize the tracker.

        :param user_name: Name of the loggedin user
        :param max_consecutive_login_attempts: Maximum allowed consecutive failed login attempts
        :param lock_interval: Locking interval incase of maximum failed attempts
        """
        ...
    @property
    def login_failed_count(self): ...
    @login_failed_count.setter
    def login_failed_count(self, count): ...
    @login_failed_count.deleter
    def login_failed_count(self): ...
    @property
    def login_failed_time(self):
        """First failed login attempt time within lock interval.

        For every user we track only First failed login attempt time within lock interval of time.
        """
        ...
    @login_failed_time.setter
    def login_failed_time(self, timestamp): ...
    @login_failed_time.deleter
    def login_failed_time(self): ...
    def add_failure_attempt(self):  # -> None:
        """Log user failure attempts into the system.

        Increase the failure count if new failure is with in current lock interval time period, if not reset the login failure count.
        """
        ...
    def add_success_attempt(self):  # -> None:
        """Reset login failures."""
        ...
    def is_user_allowed(self) -> bool:
        """Is user allowed to login

        User is not allowed to login if login failures are greater than threshold within in lock interval from first login failure.
        """
        ...
