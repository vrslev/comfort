"""
This type stub file was generated by pyright.
"""

import frappe

class EmailLimitCrossedError(frappe.ValidationError): ...

def send(
    recipients=...,
    sender=...,
    subject=...,
    message=...,
    text_content=...,
    reference_doctype=...,
    reference_name=...,
    unsubscribe_method=...,
    unsubscribe_params=...,
    unsubscribe_message=...,
    attachments=...,
    reply_to=...,
    cc=...,
    bcc=...,
    message_id=...,
    in_reply_to=...,
    send_after=...,
    expose_recipients=...,
    send_priority=...,
    communication=...,
    now=...,
    read_receipt=...,
    queue_separately=...,
    is_notification=...,
    add_unsubscribe_link=...,
    inline_images=...,
    header=...,
    print_letterhead=...,
    with_container=...,
):  # -> None:
    """Add email to sending queue (Email Queue)

    :param recipients: List of recipients.
    :param sender: Email sender.
    :param subject: Email subject.
    :param message: Email message.
    :param text_content: Text version of email message.
    :param reference_doctype: Reference DocType of caller document.
    :param reference_name: Reference name of caller document.
    :param send_priority: Priority for Email Queue, default 1.
    :param unsubscribe_method: URL method for unsubscribe. Default is `/api/method/frappe.email.queue.unsubscribe`.
    :param unsubscribe_params: additional params for unsubscribed links. default are name, doctype, email
    :param attachments: Attachments to be sent.
    :param reply_to: Reply to be captured here (default inbox)
    :param in_reply_to: Used to send the Message-Id of a received email back as In-Reply-To.
    :param send_after: Send this email after the given datetime. If value is in integer, then `send_after` will be the automatically set to no of days from current date.
    :param communication: Communication link to be set in Email Queue record
    :param now: Send immediately (don't send in the background)
    :param queue_separately: Queue each email separately
    :param is_notification: Marks email as notification so will not trigger notifications from system
    :param add_unsubscribe_link: Send unsubscribe link in the footer of the Email, default 1.
    :param inline_images: List of inline images as {"filename", "filecontent"}. All src properties will be replaced with random Content-Id
    :param header: Append header in email (boolean)
    :param with_container: Wraps email inside styled container
    """
    ...

def add(recipients, sender, subject, **kwargs):  # -> None:
    """Add to Email Queue"""
    ...

def get_email_queue(recipients, sender, subject, **kwargs):
    """Make Email Queue object"""
    ...

def get_emails_sent_this_month(): ...
def get_emails_sent_today(): ...
def get_unsubscribe_message(unsubscribe_message, expose_recipients): ...
def get_unsubcribed_url(
    reference_doctype, reference_name, email, unsubscribe_method, unsubscribe_params
): ...
@frappe.whitelist(allow_guest=True)
def unsubscribe(doctype, name, email): ...
def return_unsubscribed_page(email, doctype, name): ...
def flush(from_test=...):  # -> None:
    """flush email queue, every time: called from scheduler"""
    ...

def get_queue(): ...
def send_one(email, smtpserver=..., auto_commit=..., now=...):  # -> None:
    """Send Email Queue with given smtpserver"""
    ...

def prepare_message(email, recipient, recipients_list): ...
def clear_outbox(days=...):  # -> None:
    """Remove low priority older than 31 days in Outbox or configured in Log Settings.
    Note: Used separate query to avoid deadlock
    """
    ...

def set_expiry_for_email_queue():  # -> None:
    """Mark emails as expire that has not sent for 7 days.
    Called daily via scheduler.
    """
    ...
