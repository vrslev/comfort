"""
This type stub file was generated by pyright.
"""

import imaplib
import poplib

import frappe

class EmailSizeExceededError(frappe.ValidationError): ...
class EmailTimeoutError(frappe.ValidationError): ...
class TotalSizeExceededError(frappe.ValidationError): ...
class LoginLimitExceeded(frappe.ValidationError): ...

class EmailServer:
    """Wrapper for POP server to pull emails."""

    def __init__(self, args=...) -> None: ...
    def setup(self, args=...): ...
    def check_mails(self): ...
    def process_message(self, mail): ...
    def connect(self):  # -> bool:
        """Connect to **Email Account**."""
        ...
    def connect_imap(self):  # -> Literal[True]:
        """Connect to IMAP"""
        ...
    def connect_pop(self): ...
    def get_messages(self):  # -> dict[str, list[Unknown]] | None:
        """Returns new email messages in a list."""
        ...
    def get_new_mails(self):  # -> Any | List[bytes]:
        """Return list of new mails"""
        ...
    def check_imap_uidvalidity(self): ...
    def parse_imap_response(self, cmd, response): ...
    def retrieve_message(self, message_meta, msg_num=...): ...
    def get_email_seen_status(self, uid, flag_string):  # -> None:
        """parse the email FLAGS response"""
        ...
    def has_login_limit_exceeded(self, e): ...
    def is_temporary_system_problem(self, e): ...
    def validate_message_limits(self, message_meta): ...
    def make_error_msg(self, msg_num, incoming_mail): ...
    def update_flag(self, uid_list=...):  # -> None:
        """set all uids mails the flag as seen"""
        ...

class Email:
    """Wrapper for an email."""

    def __init__(self, content) -> None:
        """Parses headers, content, attachments from given raw message.

        :param content: Raw message."""
        ...
    def parse(self):  # -> None:
        """Walk and process multi-part email."""
        ...
    def set_subject(self):  # -> None:
        """Parse and decode `Subject` header."""
        ...
    def set_from(self): ...
    def decode_email(self, email): ...
    def set_content_and_type(self): ...
    def process_part(self, part):  # -> None:
        """Parse email `part` and set it to `text_content`, `html_content` or `attachments`."""
        ...
    def show_attached_email_headers_in_content(self, part): ...
    def get_charset(self, part):  # -> Any:
        """Detect charset."""
        ...
    def get_payload(self, part): ...
    def get_attachment(self, part): ...
    def save_attachments_in_doc(self, doc):  # -> list[Unknown]:
        """Save email attachments in given document."""
        ...
    def get_thread_id(self):  # -> None:
        """Extract thread ID from `[]`"""
        ...

class TimerMixin:
    def __init__(self, *args, **kwargs) -> None: ...
    def quit(self, *args, **kwargs): ...

class Timed_POP3(TimerMixin, poplib.POP3):
    _super = poplib.POP3

class Timed_POP3_SSL(TimerMixin, poplib.POP3_SSL):
    _super = poplib.POP3_SSL

class Timed_IMAP4(TimerMixin, imaplib.IMAP4):
    _super = imaplib.IMAP4

class Timed_IMAP4_SSL(TimerMixin, imaplib.IMAP4_SSL):
    _super = imaplib.IMAP4_SSL
