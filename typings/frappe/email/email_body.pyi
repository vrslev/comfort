"""
This type stub file was generated by pyright.
"""

import frappe

def get_email(
    recipients,
    sender=...,
    msg=...,
    subject=...,
    text_content=...,
    footer=...,
    print_html=...,
    formatted=...,
    attachments=...,
    content=...,
    reply_to=...,
    cc=...,
    bcc=...,
    email_account=...,
    expose_recipients=...,
    inline_images=...,
    header=...,
):  # -> EMail:
    """Prepare an email with the following format:
    - multipart/mixed
            - multipart/alternative
                    - text/plain
                    - multipart/related
                            - text/html
                            - inline image
                    - attachment
    """
    ...

class EMail:
    """
    Wrapper on the email module. Email object represents emails to be sent to the client.
    Also provides a clean way to add binary `FileData` attachments
    Also sets all messages as multipart/alternative for cleaner reading in text-only clients
    """

    def __init__(
        self,
        sender=...,
        recipients=...,
        subject=...,
        alternative=...,
        reply_to=...,
        cc=...,
        bcc=...,
        email_account=...,
        expose_recipients=...,
    ) -> None: ...
    def set_html(
        self,
        message,
        text_content=...,
        footer=...,
        print_html=...,
        formatted=...,
        inline_images=...,
        header=...,
    ):  # -> None:
        """Attach message in the html portion of multipart/alternative"""
        ...
    def set_text(self, message):  # -> None:
        """
        Attach message in the text portion of multipart/alternative
        """
        ...
    def set_part_html(self, message, inline_images): ...
    def set_html_as_text(self, html):  # -> None:
        """Set plain text from HTML"""
        ...
    def set_message(
        self, message, mime_type=..., as_attachment=..., filename=...
    ):  # -> None:
        """Append the message with MIME content to the root node (as attachment)"""
        ...
    def attach_file(self, n):  # -> None:
        """attach a file from the `FileData` table"""
        ...
    def add_attachment(
        self, fname, fcontent, content_type=..., parent=..., content_id=..., inline=...
    ):  # -> None:
        """add attachment"""
        ...
    def add_pdf_attachment(self, name, html, options=...): ...
    def validate(self):  # -> None:
        """validate the Email Addresses"""
        ...
    def replace_sender(self): ...
    def replace_sender_name(self): ...
    def set_message_id(self, message_id, is_notification=...): ...
    def set_in_reply_to(self, in_reply_to):  # -> None:
        """Used to send the Message-Id of a received email back as In-Reply-To"""
        ...
    def make(self):  # -> None:
        """build into msg_root"""
        ...
    def set_header(self, key, value): ...
    def as_string(self):  # -> str:
        """validate, build message and convert to string"""
        ...

def get_formatted_html(
    subject,
    message,
    footer=...,
    print_html=...,
    email_account=...,
    header=...,
    unsubscribe_link=...,
    sender=...,
    with_container=...,
): ...
@frappe.whitelist()
def get_email_html(template, args, subject, header=..., with_container=...): ...
def inline_style_in_html(html):  # -> Any | str:
    """Convert email.css and html to inline-styled html"""
    ...

def add_attachment(
    fname, fcontent, content_type=..., parent=..., content_id=..., inline=...
):  # -> None:
    """Add attachment to parent which must an email object"""
    ...

def get_message_id():  # -> str:
    """Returns Message ID created from doctype and name"""
    ...

def get_signature(email_account): ...
def get_footer(email_account, footer=...):
    """append a footer (signature)"""
    ...

def replace_filename_with_cid(message):  # -> tuple[Unknown | str, list[Unknown]]:
    """Replaces <img embed="assets/frappe/images/filename.jpg" ...> with
    <img src="cid:content_id" ...> and return the modified message and
    a list of inline_images with {filename, filecontent, content_id}
    """
    ...

def get_filecontent_from_path(path): ...
def get_header(header=...):  # -> Text | None:
    """Build header from template"""
    ...

def sanitize_email_header(str): ...
def get_brand_logo(email_account): ...
