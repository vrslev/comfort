"""
This type stub file was generated by pyright.
"""

default_timeout = ...
queue_timeout = ...
redis_connection = ...

def enqueue(
    method,
    queue=...,
    timeout=...,
    event=...,
    is_async=...,
    job_name=...,
    now=...,
    enqueue_after_commit=...,
    **kwargs,
):  # -> Job | Any | list[Unknown]:
    """
    Enqueue method to be executed using a background worker

    :param method: method string or method object
    :param queue: should be either long, default or short
    :param timeout: should be set according to the functions
    :param event: this is passed to enable clearing of jobs from queues
    :param is_async: if is_async=False, the method is executed immediately, else via a worker
    :param job_name: can be used to name an enqueue call, which can be used to prevent duplicate calls
    :param now: if now=True, the method is executed via frappe.call
    :param kwargs: keyword arguments to be passed to the method
    """
    ...

def enqueue_doc(
    doctype, name=..., method=..., queue=..., timeout=..., now=..., **kwargs
):  # -> Job | Any | list[Unknown]:
    """Enqueue a method to be run on a document"""
    ...

def run_doc_method(doctype, name, doc_method, **kwargs): ...
def execute_job(
    site, method, event, job_name, kwargs, user=..., is_async=..., retry=...
):  # -> None:
    """Executes job in a worker, performs commit/rollback and logs if there is any error"""
    ...

def start_worker(queue=..., quiet=...):  # -> None:
    """Wrapper to start rq worker. Connects to redis and monitors these queues."""
    ...

def get_worker_name(queue):  # -> str | None:
    """When limiting worker to a specific queue, also append queue name to default worker name"""
    ...

def get_jobs(site=..., queue=..., key=...):  # -> defaultdict[Unknown, list[Unknown]]:
    """Gets jobs per queue or per site or both"""
    ...

def get_queue_list(queue_list=...):  # -> list[str]:
    """Defines possible queues. Also wraps a given queue in a list after validating."""
    ...

def get_workers(queue):  # -> list[Worker]:
    """Returns a list of Worker objects tied to a queue object"""
    ...

def get_running_jobs_in_queue(queue):  # -> list[Unknown]:
    """Returns a list of Jobs objects that are tied to a queue object and are currently running"""
    ...

def get_queue(queue, is_async=...):  # -> Queue:
    """Returns a Queue object tied to a redis connection"""
    ...

def validate_queue(queue, default_queue_list=...): ...
def get_redis_conn(): ...
def enqueue_test_job(): ...
def test_job(s): ...
