"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

"""
This type stub file was generated by pyright.
"""

class NestedSetRecursionError(frappe.ValidationError): ...
class NestedSetMultipleRootsError(frappe.ValidationError): ...
class NestedSetChildExistsError(frappe.ValidationError): ...
class NestedSetInvalidMergeError(frappe.ValidationError): ...

def update_nsm(doc): ...
def update_add_node(doc, parent, parent_field):
    """
    insert a new node
    """
    ...

def update_move_node(doc, parent_field): ...
@frappe.whitelist()
def rebuild_tree(doctype, parent_field):
    """
    call rebuild_node for all root nodes
    """
    ...

def rebuild_node(doctype, parent, left, parent_field):
    """
    reset lft, rgt and recursive call for all children
    """
    ...

def validate_loop(doctype, name, lft, rgt):
    """check if item not an ancestor (loop)"""
    ...

class NestedSet(Document):
    def __setup__(self): ...
    def on_update(self): ...
    def on_trash(self, allow_root_deletion=...): ...
    def validate_if_child_exists(self): ...
    def before_rename(self, olddn, newdn, merge=..., group_fname=...): ...
    def after_rename(self, olddn, newdn, merge=...): ...
    def validate_one_root(self): ...
    def get_root_node_count(self): ...
    def validate_ledger(self, group_identifier=...): ...
    def get_ancestors(self): ...

def get_root_of(doctype):
    """Get root element of a DocType with a tree structure"""
    ...

def get_ancestors_of(doctype, name, order_by=..., limit=...):
    """Get ancestor elements of a DocType with a tree structure"""
    ...

def get_descendants_of(doctype, name, order_by=..., limit=..., ignore_permissions=...):
    """Return descendants of the current record"""
    ...
