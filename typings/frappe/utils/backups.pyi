"""
This type stub file was generated by pyright.
"""

import frappe

verbose = ...
compress = ...
_verbose = ...
base_tables = ...

class BackupGenerator:
    """
    This class contains methods to perform On Demand Backup

    To initialize, specify (db_name, user, password, db_file_name=None, db_host="localhost")
    If specifying db_file_name, also append ".sql.gz"
    """

    def __init__(
        self,
        db_name,
        user,
        password,
        backup_path=...,
        backup_path_db=...,
        backup_path_files=...,
        backup_path_private_files=...,
        db_host=...,
        db_port=...,
        db_type=...,
        backup_path_conf=...,
        ignore_conf=...,
        compress_files=...,
        include_doctypes=...,
        exclude_doctypes=...,
        verbose=...,
    ) -> None: ...
    def setup_backup_directory(self): ...
    def setup_backup_tables(self):  # -> None:
        """Sets self.backup_includes, self.backup_excludes based on passed args"""
        ...
    @property
    def site_config_backup_path(self): ...
    def get_backup(self, older_than=..., ignore_files=..., force=...):  # -> None:
        """
        Takes a new dump if existing file is old
        and sends the link to the file as email
        """
        ...
    def set_backup_file_name(self): ...
    def get_recent_backup(self, older_than, partial=...): ...
    def zip_files(self): ...
    def get_summary(self): ...
    def print_summary(self): ...
    def backup_files(self): ...
    def copy_site_config(self): ...
    def take_dump(self): ...
    def send_email(self):
        """
        Sends the link to backup file located at erpnext/backups
        """
        ...

@frappe.whitelist()
def fetch_latest_backups(partial=...):  # -> dict[str, str | None]:
    """Fetches paths of the latest backup taken in the last 30 days
    Only for: System Managers

    Returns:
            dict: relative Backup Paths
    """
    ...

def scheduled_backup(
    older_than=...,
    ignore_files=...,
    backup_path=...,
    backup_path_db=...,
    backup_path_files=...,
    backup_path_private_files=...,
    backup_path_conf=...,
    ignore_conf=...,
    include_doctypes=...,
    exclude_doctypes=...,
    compress=...,
    force=...,
    verbose=...,
):  # -> BackupGenerator:
    """this function is called from scheduler
    deletes backups older than 7 days
    takes backup"""
    ...

def new_backup(
    older_than=...,
    ignore_files=...,
    backup_path=...,
    backup_path_db=...,
    backup_path_files=...,
    backup_path_private_files=...,
    backup_path_conf=...,
    ignore_conf=...,
    include_doctypes=...,
    exclude_doctypes=...,
    compress=...,
    force=...,
    verbose=...,
): ...
def delete_temp_backups(older_than=...):  # -> None:
    """
    Cleans up the backup_link_path directory by deleting older files
    """
    ...

def is_file_old(file_path, older_than=...):  # -> bool:
    """
    Checks if file exists and is older than specified hours
    Returns ->
    True: file does not exist or file is old
    False: file is new
    """
    ...

def get_backup_path(): ...
def backup(
    with_files=...,
    backup_path_db=...,
    backup_path_files=...,
    backup_path_private_files=...,
    backup_path_conf=...,
    quiet=...,
):  # -> dict[str, Unknown | str]:
    "Backup"
    ...

if __name__ == "__main__":
    cmd = ...
    db_type = ...
    db_port = ...
