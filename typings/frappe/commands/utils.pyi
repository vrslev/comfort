"""
This type stub file was generated by pyright.
"""

import click

from frappe.commands import pass_context

@click.command("build")
@click.option("--app", help="Build assets for app")
@click.option(
    "--hard-link",
    is_flag=True,
    default=False,
    help="Copy the files instead of symlinking",
)
@click.option(
    "--make-copy",
    is_flag=True,
    default=False,
    help="[DEPRECATED] Copy the files instead of symlinking",
)
@click.option(
    "--restore",
    is_flag=True,
    default=False,
    help="[DEPRECATED] Copy the files instead of symlinking with force",
)
@click.option("--verbose", is_flag=True, default=False, help="Verbose")
@click.option(
    "--force",
    is_flag=True,
    default=False,
    help="Force build assets instead of downloading available",
)
def build(
    app=..., hard_link=..., make_copy=..., restore=..., verbose=..., force=...
):  # -> None:
    "Minify + concatenate JS and CSS files, build translations"
    ...

@click.command("watch")
def watch():  # -> None:
    "Watch and concatenate JS and CSS files as and when they change"
    ...

@click.command("clear-cache")
@pass_context
def clear_cache(context):  # -> None:
    "Clear cache, doctype cache and defaults"
    ...

@click.command("clear-website-cache")
@pass_context
def clear_website_cache(context):  # -> None:
    "Clear website cache"
    ...

@click.command("destroy-all-sessions")
@click.option("--reason")
@pass_context
def destroy_all_sessions(context, reason=...):  # -> None:
    "Clear sessions of all users (logs them out)"
    ...

@click.command("show-config")
@click.option("--format", "-f", type=click.Choice(["text", "json"]), default="text")
@pass_context
def show_config(context, format):  # -> None:
    "Print configuration file to STDOUT in speified format"
    ...

@click.command("reset-perms")
@pass_context
def reset_perms(context):  # -> None:
    "Reset permissions for all doctypes"
    ...

@click.command("execute")
@click.argument("method")
@click.option("--args")
@click.option("--kwargs")
@click.option("--profile", is_flag=True, default=False)
@pass_context
def execute(context, method, args=..., kwargs=..., profile=...):  # -> None:
    "Execute a function"
    ...

@click.command("add-to-email-queue")
@click.argument("email-path")
@pass_context
def add_to_email_queue(context, email_path):  # -> None:
    "Add an email to the Email Queue"
    ...

@click.command("export-doc")
@click.argument("doctype")
@click.argument("docname")
@pass_context
def export_doc(context, doctype, docname):  # -> None:
    "Export a single document to csv"
    ...

@click.command("export-json")
@click.argument("doctype")
@click.argument("path")
@click.option("--name", help="Export only one document")
@pass_context
def export_json(context, doctype, path, name=...):  # -> None:
    "Export doclist as json to the given path, use '-' as name for Singles."
    ...

@click.command("export-csv")
@click.argument("doctype")
@click.argument("path")
@pass_context
def export_csv(context, doctype, path):  # -> None:
    "Export data import template with data for DocType"
    ...

@click.command("export-fixtures")
@click.option("--app", default=None, help="Export fixtures of a specific app")
@pass_context
def export_fixtures(context, app=...):  # -> None:
    "Export fixtures"
    ...

@click.command("import-doc")
@click.argument("path")
@pass_context
def import_doc(context, path, force=...):  # -> None:
    "Import (insert/update) doclist. If the argument is a directory, all files ending with .json are imported"
    ...

@click.command("import-csv")
@click.argument("path")
@click.option(
    "--only-insert",
    default=False,
    is_flag=True,
    help="Do not overwrite existing records",
)
@click.option(
    "--submit-after-import",
    default=False,
    is_flag=True,
    help="Submit document after importing it",
)
@click.option(
    "--ignore-encoding-errors",
    default=False,
    is_flag=True,
    help="Ignore encoding errors while coverting to unicode",
)
@click.option("--no-email", default=True, is_flag=True, help="Send email if applicable")
@pass_context
def import_csv(
    context,
    path,
    only_insert=...,
    submit_after_import=...,
    ignore_encoding_errors=...,
    no_email=...,
):  # -> None:
    "Import CSV using data import"
    ...

@click.command("data-import")
@click.option(
    "--file",
    "file_path",
    type=click.Path(),
    required=True,
    help="Path to import file (.csv, .xlsx)",
)
@click.option("--doctype", type=str, required=True)
@click.option(
    "--type",
    "import_type",
    type=click.Choice(["Insert", "Update"], case_sensitive=False),
    default="Insert",
    help="Insert New Records or Update Existing Records",
)
@click.option(
    "--submit-after-import",
    default=False,
    is_flag=True,
    help="Submit document after importing it",
)
@click.option(
    "--mute-emails", default=True, is_flag=True, help="Mute emails during import"
)
@pass_context
def data_import(
    context,
    file_path,
    doctype,
    import_type=...,
    submit_after_import=...,
    mute_emails=...,
):  # -> None:
    "Import documents in bulk from CSV or XLSX using data import"
    ...

@click.command("bulk-rename")
@click.argument("doctype")
@click.argument("path")
@pass_context
def bulk_rename(context, doctype, path):  # -> None:
    "Rename multiple records via CSV file"
    ...

@click.command("mariadb")
@pass_context
def mariadb(context):  # -> NoReturn:
    """
    Enter into mariadb console for a given site.
    """
    ...

@click.command("postgres")
@pass_context
def postgres(context):  # -> None:
    """
    Enter into postgres console for a given site.
    """
    ...

@click.command("jupyter")
@pass_context
def jupyter(context): ...
@click.command("console")
@pass_context
def console(context):  # -> None:
    "Start ipython console for a site"
    ...

@click.command("run-tests")
@click.option("--app", help="For App")
@click.option("--doctype", help="For DocType")
@click.option(
    "--doctype-list-path",
    help="Path to .txt file for list of doctypes. Example erpnext/tests/server/agriculture.txt",
)
@click.option("--test", multiple=True, help="Specific test")
@click.option("--ui-tests", is_flag=True, default=False, help="Run UI Tests")
@click.option("--module", help="Run tests in a module")
@click.option("--profile", is_flag=True, default=False)
@click.option("--coverage", is_flag=True, default=False)
@click.option(
    "--skip-test-records", is_flag=True, default=False, help="Don't create test records"
)
@click.option(
    "--skip-before-tests",
    is_flag=True,
    default=False,
    help="Don't run before tests hook",
)
@click.option("--junit-xml-output", help="Destination file path for junit xml report")
@click.option("--failfast", is_flag=True, default=False)
@pass_context
def run_tests(
    context,
    app=...,
    module=...,
    doctype=...,
    test=...,
    profile=...,
    coverage=...,
    junit_xml_output=...,
    ui_tests=...,
    doctype_list_path=...,
    skip_test_records=...,
    skip_before_tests=...,
    failfast=...,
):  # -> None:
    "Run tests"
    ...

@click.command("run-parallel-tests")
@click.option("--app", help="For App", default="frappe")
@click.option("--build-number", help="Build number", default=1)
@click.option("--total-builds", help="Total number of builds", default=1)
@click.option("--with-coverage", is_flag=True, help="Build coverage file")
@click.option(
    "--use-orchestrator", is_flag=True, help="Use orchestrator to run parallel tests"
)
@pass_context
def run_parallel_tests(
    context, app, build_number, total_builds, with_coverage=..., use_orchestrator=...
): ...
@click.command("run-ui-tests")
@click.argument("app")
@click.option("--headless", is_flag=True, help="Run UI Test in headless mode")
@click.option("--parallel", is_flag=True, help="Run UI Test in parallel mode")
@click.option("--ci-build-id")
@pass_context
def run_ui_tests(context, app, headless=..., parallel=..., ci_build_id=...):  # -> None:
    "Run UI tests"
    ...

@click.command("serve")
@click.option("--port", default=8000)
@click.option("--profile", is_flag=True, default=False)
@click.option("--noreload", "no_reload", is_flag=True, default=False)
@click.option("--nothreading", "no_threading", is_flag=True, default=False)
@pass_context
def serve(
    context,
    port=...,
    profile=...,
    no_reload=...,
    no_threading=...,
    sites_path=...,
    site=...,
):  # -> None:
    "Start development web server"
    ...

@click.command("request")
@click.option(
    "--args", help="arguments like `?cmd=test&key=value` or `/api/request/method?..`"
)
@click.option("--path", help="path to request JSON")
@pass_context
def request(context, args=..., path=...):  # -> None:
    "Run a request as an admin"
    ...

@click.command("make-app")
@click.argument("destination")
@click.argument("app_name")
def make_app(destination, app_name):  # -> None:
    "Creates a boilerplate app"
    ...

@click.command("set-config")
@click.argument("key")
@click.argument("value")
@click.option(
    "-g",
    "--global",
    "global_",
    is_flag=True,
    default=False,
    help="Set value in bench config",
)
@click.option(
    "-p", "--parse", is_flag=True, default=False, help="Evaluate as Python Object"
)
@click.option(
    "--as-dict", is_flag=True, default=False, help="Legacy: Evaluate as Python Object"
)
@pass_context
def set_config(context, key, value, global_=..., parse=..., as_dict=...):  # -> None:
    "Insert/Update a value in site_config.json"
    ...

@click.command("version")
def get_version():  # -> None:
    "Show the versions of all the installed apps"
    ...

@click.command("rebuild-global-search")
@click.option(
    "--static-pages",
    is_flag=True,
    default=False,
    help="Rebuild global search for static pages",
)
@pass_context
def rebuild_global_search(context, static_pages=...):  # -> None:
    """Setup help table in the current site (called after migrate)"""
    ...

commands = ...
