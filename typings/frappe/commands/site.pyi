"""
This type stub file was generated by pyright.
"""

import click

from frappe.commands import pass_context

@click.command("new-site")
@click.argument("site")
@click.option("--db-name", help="Database name")
@click.option("--db-password", help="Database password")
@click.option(
    "--db-type",
    default="mariadb",
    type=click.Choice(["mariadb", "postgres"]),
    help='Optional "postgres" or "mariadb". Default is "mariadb"',
)
@click.option("--db-host", help="Database Host")
@click.option("--db-port", type=int, help="Database Port")
@click.option(
    "--mariadb-root-username", default="root", help="Root username for MariaDB"
)
@click.option("--mariadb-root-password", help="Root password for MariaDB")
@click.option(
    "--no-mariadb-socket",
    is_flag=True,
    default=False,
    help="Set MariaDB host to % and use TCP/IP Socket instead of using the UNIX Socket",
)
@click.option(
    "--admin-password", help="Administrator password for new site", default=None
)
@click.option("--verbose", is_flag=True, default=False, help="Verbose")
@click.option(
    "--force",
    help="Force restore if site/database already exists",
    is_flag=True,
    default=False,
)
@click.option("--source_sql", help="Initiate database with a SQL file")
@click.option("--install-app", multiple=True, help="Install app after installation")
def new_site(
    site,
    mariadb_root_username=...,
    mariadb_root_password=...,
    admin_password=...,
    verbose=...,
    install_apps=...,
    source_sql=...,
    force=...,
    no_mariadb_socket=...,
    install_app=...,
    db_name=...,
    db_password=...,
    db_type=...,
    db_host=...,
    db_port=...,
):  # -> None:
    "Create a new site"
    ...

@click.command("restore")
@click.argument("sql-file-path")
@click.option(
    "--mariadb-root-username", default="root", help="Root username for MariaDB"
)
@click.option("--mariadb-root-password", help="Root password for MariaDB")
@click.option("--db-name", help="Database name for site in case it is a new one")
@click.option("--admin-password", help="Administrator password for new site")
@click.option("--install-app", multiple=True, help="Install app after installation")
@click.option(
    "--with-public-files",
    help="Restores the public files of the site, given path to its tar file",
)
@click.option(
    "--with-private-files",
    help="Restores the private files of the site, given path to its tar file",
)
@click.option(
    "--force",
    is_flag=True,
    default=False,
    help="Ignore the validations and downgrade warnings. This action is not recommended",
)
@pass_context
def restore(
    context,
    sql_file_path,
    mariadb_root_username=...,
    mariadb_root_password=...,
    db_name=...,
    verbose=...,
    install_app=...,
    admin_password=...,
    force=...,
    with_public_files=...,
    with_private_files=...,
):  # -> None:
    "Restore site database from an sql file"
    ...

@click.command("partial-restore")
@click.argument("sql-file-path")
@click.option("--verbose", "-v", is_flag=True)
@pass_context
def partial_restore(context, sql_file_path, verbose): ...
@click.command("reinstall")
@click.option("--admin-password", help="Administrator Password for reinstalled site")
@click.option("--mariadb-root-username", help="Root username for MariaDB")
@click.option("--mariadb-root-password", help="Root password for MariaDB")
@click.option(
    "--yes", is_flag=True, default=False, help="Pass --yes to skip confirmation"
)
@pass_context
def reinstall(
    context,
    admin_password=...,
    mariadb_root_username=...,
    mariadb_root_password=...,
    yes=...,
):  # -> None:
    "Reinstall site ie. wipe all data and start over"
    ...

@click.command("install-app")
@click.argument("apps", nargs=-1)
@pass_context
def install_app(context, apps):  # -> NoReturn:
    "Install a new app to site, supports multiple apps"
    ...

@click.command("list-apps")
@click.option("--format", "-f", type=click.Choice(["text", "json"]), default="text")
@pass_context
def list_apps(context, format):  # -> None:
    "List apps in site"
    ...

@click.command("add-system-manager")
@click.argument("email")
@click.option("--first-name")
@click.option("--last-name")
@click.option("--password")
@click.option("--send-welcome-email", default=False, is_flag=True)
@pass_context
def add_system_manager(
    context, email, first_name, last_name, send_welcome_email, password
):  # -> None:
    "Add a new system manager to a site"
    ...

@click.command("disable-user")
@click.argument("email")
@pass_context
def disable_user(context, email): ...
@click.command("migrate")
@click.option("--skip-failing", is_flag=True, help="Skip patches that fail to run")
@click.option(
    "--skip-search-index", is_flag=True, help="Skip search indexing for web documents"
)
@pass_context
def migrate(context, skip_failing=..., skip_search_index=...):  # -> None:
    "Run patches, sync schema and rebuild files/translations"
    ...

@click.command("migrate-to")
@click.argument("frappe_provider")
@pass_context
def migrate_to(context, frappe_provider):  # -> None:
    "Migrates site to the specified provider"
    ...

@click.command("run-patch")
@click.argument("module")
@click.option("--force", is_flag=True)
@pass_context
def run_patch(context, module, force):  # -> None:
    "Run a particular patch"
    ...

@click.command("reload-doc")
@click.argument("module")
@click.argument("doctype")
@click.argument("docname")
@pass_context
def reload_doc(context, module, doctype, docname):  # -> None:
    "Reload schema for a DocType"
    ...

@click.command("reload-doctype")
@click.argument("doctype")
@pass_context
def reload_doctype(context, doctype):  # -> None:
    "Reload schema for a DocType"
    ...

@click.command("add-to-hosts")
@pass_context
def add_to_hosts(context):  # -> None:
    "Add site to hosts"
    ...

def use(site, sites_path=...): ...
@click.command("backup")
@click.option(
    "--with-files", default=False, is_flag=True, help="Take backup with files"
)
@click.option(
    "--include",
    "--only",
    "-i",
    default="",
    type=str,
    help="Specify the DocTypes to backup seperated by commas",
)
@click.option(
    "--exclude",
    "-e",
    default="",
    type=str,
    help="Specify the DocTypes to not backup seperated by commas",
)
@click.option(
    "--backup-path",
    default=None,
    help="Set path for saving all the files in this operation",
)
@click.option(
    "--backup-path-db", default=None, help="Set path for saving database file"
)
@click.option(
    "--backup-path-files", default=None, help="Set path for saving public file"
)
@click.option(
    "--backup-path-private-files", default=None, help="Set path for saving private file"
)
@click.option(
    "--backup-path-conf", default=None, help="Set path for saving config file"
)
@click.option(
    "--ignore-backup-conf",
    default=False,
    is_flag=True,
    help="Ignore excludes/includes set in config",
)
@click.option("--verbose", default=False, is_flag=True, help="Add verbosity")
@click.option(
    "--compress", default=False, is_flag=True, help="Compress private and public files"
)
@pass_context
def backup(
    context,
    with_files=...,
    backup_path=...,
    backup_path_db=...,
    backup_path_files=...,
    backup_path_private_files=...,
    backup_path_conf=...,
    ignore_backup_conf=...,
    verbose=...,
    compress=...,
    include=...,
    exclude=...,
):  # -> NoReturn:
    "Backup"
    ...

@click.command("remove-from-installed-apps")
@click.argument("app")
@pass_context
def remove_from_installed_apps(context, app):  # -> None:
    "Remove app from site's installed-apps list"
    ...

@click.command("uninstall-app")
@click.argument("app")
@click.option(
    "--yes",
    "-y",
    help="To bypass confirmation prompt for uninstalling the app",
    is_flag=True,
    default=False,
    multiple=True,
)
@click.option(
    "--dry-run",
    help="List all doctypes that will be deleted",
    is_flag=True,
    default=False,
)
@click.option("--no-backup", help="Do not backup the site", is_flag=True, default=False)
@click.option("--force", help="Force remove app from site", is_flag=True, default=False)
@pass_context
def uninstall(context, app, dry_run, yes, no_backup, force):  # -> None:
    "Remove app and linked modules from site"
    ...

@click.command("drop-site")
@click.argument("site")
@click.option("--root-login", default="root")
@click.option("--root-password")
@click.option("--archived-sites-path")
@click.option("--no-backup", is_flag=True, default=False)
@click.option(
    "--force",
    help="Force drop-site even if an error is encountered",
    is_flag=True,
    default=False,
)
def drop_site(
    site,
    root_login=...,
    root_password=...,
    archived_sites_path=...,
    force=...,
    no_backup=...,
): ...
def move(dest_dir, site): ...
@click.command("set-admin-password")
@click.argument("admin-password")
@click.option(
    "--logout-all-sessions",
    help="Logout from all sessions",
    is_flag=True,
    default=False,
)
@pass_context
def set_admin_password(context, admin_password, logout_all_sessions=...):  # -> None:
    "Set Administrator password for a site"
    ...

@click.command("set-last-active-for-user")
@click.option("--user", help="Setup last active date for user")
@pass_context
def set_last_active_for_user(context, user=...):  # -> None:
    "Set users last active date to current datetime"
    ...

@click.command("publish-realtime")
@click.argument("event")
@click.option("--message")
@click.option("--room")
@click.option("--user")
@click.option("--doctype")
@click.option("--docname")
@click.option("--after-commit")
@pass_context
def publish_realtime(
    context, event, message, room, user, doctype, docname, after_commit
):  # -> None:
    "Publish realtime event from bench"
    ...

@click.command("browse")
@click.argument("site", required=False)
@pass_context
def browse(context, site):  # -> None:
    """Opens the site on web browser"""
    ...

@click.command("start-recording")
@pass_context
def start_recording(context): ...
@click.command("stop-recording")
@pass_context
def stop_recording(context): ...
@click.command("ngrok")
@pass_context
def start_ngrok(context): ...
@click.command("build-search-index")
@pass_context
def build_search_index(context): ...

commands = ...
