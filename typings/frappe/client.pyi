"""
This type stub file was generated by pyright.
"""

import frappe

@frappe.whitelist()
def get_list(
    doctype,
    fields=...,
    filters=...,
    order_by=...,
    limit_start=...,
    limit_page_length=...,
    parent=...,
    debug=...,
    as_dict=...,
):
    """Returns a list of records by filters, fields, ordering and limit

    :param doctype: DocType of the data to be queried
    :param fields: fields to be returned. Default is `name`
    :param filters: filter list by this dict
    :param order_by: Order by this fieldname
    :param limit_start: Start at this index
    :param limit_page_length: Number of records to be returned (default 20)"""
    ...

@frappe.whitelist()
def get_count(doctype, filters=..., debug=..., cache=...): ...
@frappe.whitelist()
def get(doctype, name=..., filters=..., parent=...):
    """Returns a document by name or filters

    :param doctype: DocType of the document to be returned
    :param name: return document of this `name`
    :param filters: If name is not set, filter by these values and return the first match"""
    ...

@frappe.whitelist()
def get_value(
    doctype, fieldname, filters=..., as_dict=..., debug=..., parent=...
):  # -> dict[Unknown, Unknown] | None:
    """Returns a value form a document

    :param doctype: DocType to be queried
    :param fieldname: Field to be returned (default `name`)
    :param filters: dict or string for identifying the record"""
    ...

@frappe.whitelist()
def get_single_value(doctype, field): ...
@frappe.whitelist(methods=["POST", "PUT"])
def set_value(doctype, name, fieldname, value=...):
    """Set a value using get_doc, group of values

    :param doctype: DocType of the document
    :param name: name of the document
    :param fieldname: fieldname string or JSON / dict with key value pair
    :param value: value if fieldname is JSON / dict"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def insert(doc=...):
    """Insert a document

    :param doc: JSON or dict object to be inserted"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def insert_many(docs=...):  # -> list[Unknown]:
    """Insert multiple documents

    :param docs: JSON or list of dict objects to be inserted in one request"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def save(doc):
    """Update (save) an existing document

    :param doc: JSON or dict object with the properties of the document to be updated"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def rename_doc(doctype, old_name, new_name, merge=...):
    """Rename document

    :param doctype: DocType of the document to be renamed
    :param old_name: Current `name` of the document to be renamed
    :param new_name: New `name` to be set"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def submit(doc):
    """Submit a document

    :param doc: JSON or dict object to be submitted remotely"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def cancel(doctype, name):
    """Cancel a document

    :param doctype: DocType of the document to be cancelled
    :param name: name of the document to be cancelled"""
    ...

@frappe.whitelist(methods=["DELETE", "POST"])
def delete(doctype, name):  # -> None:
    """Delete a remote document

    :param doctype: DocType of the document to be deleted
    :param name: name of the document to be deleted"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def set_default(key, value, parent=...):  # -> None:
    """set a user default value"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def make_width_property_setter(doc):  # -> None:
    """Set width Property Setter

    :param doc: Property Setter document with `width` property"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def bulk_update(docs):  # -> dict[str, list[Unknown]]:
    """Bulk update documents

    :param docs: JSON list of documents to be updated remotely. Each document must have `docname` property"""
    ...

@frappe.whitelist()
def has_permission(doctype, docname, perm_type=...):  # -> dict[str, Unknown]:
    """Returns a JSON with data whether the document has the requested permission

    :param doctype: DocType of the document to be checked
    :param docname: `name` of the document to be checked
    :param perm_type: one of `read`, `write`, `create`, `submit`, `cancel`, `report`. Default is `read`"""
    ...

@frappe.whitelist()
def get_password(doctype, name, fieldname):
    """Return a password type property. Only applicable for System Managers

    :param doctype: DocType of the document that holds the password
    :param name: `name` of the document that holds the password
    :param fieldname: `fieldname` of the password property
    """
    ...

@frappe.whitelist()
def get_js(items):  # -> list[Unknown]:
    """Load JS code files.  Will also append translations
    and extend `frappe._messages`

    :param items: JSON list of paths of the js files to be loaded."""
    ...

@frappe.whitelist(allow_guest=True)
def get_time_zone():  # -> dict[str, Unknown]:
    """Returns default time zone"""
    ...

@frappe.whitelist(methods=["POST", "PUT"])
def attach_file(
    filename=...,
    filedata=...,
    doctype=...,
    docname=...,
    folder=...,
    decode_base64=...,
    is_private=...,
    docfield=...,
):
    """Attach a file to Document (POST)

    :param filename: filename e.g. test-file.txt
    :param filedata: base64 encode filedata which must be urlencoded
    :param doctype: Reference DocType to attach file to
    :param docname: Reference DocName to attach file to
    :param folder: Folder to add File into
    :param decode_base64: decode filedata from base64 encode, default is False
    :param is_private: Attach file as private file (1 or 0)
    :param docfield: file to attach to (optional)"""
    ...

@frappe.whitelist()
def get_hooks(hook, app_name=...): ...
@frappe.whitelist()
def is_document_amended(doctype, docname): ...
