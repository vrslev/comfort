"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class Contact(Document):
    def autoname(self): ...
    def validate(self): ...
    def set_user(self): ...
    def get_link_for(self, link_doctype):  # -> None:
        """Return the link name, if exists for the given link DocType"""
        ...
    def has_link(self, doctype, name): ...
    def has_common_link(self, doc): ...
    def add_email(self, email_id, is_primary=..., autosave=...): ...
    def add_phone(
        self, phone, is_primary_phone=..., is_primary_mobile_no=..., autosave=...
    ): ...
    def set_primary_email(self): ...
    def set_primary(self, fieldname): ...

def get_default_contact(doctype, name):  # -> None:
    """Returns default contact for the given doctype, name"""
    ...

@frappe.whitelist()
def invite_user(contact): ...
@frappe.whitelist()
def get_contact_details(contact): ...
def update_contact(doc, method):  # -> None:
    """Update contact when user is updated, if contact is found. Called via hooks"""
    ...

@frappe.whitelist()
@frappe.validate_and_sanitize_search_inputs
def contact_query(doctype, txt, searchfield, start, page_len, filters): ...
@frappe.whitelist()
def address_query(links): ...
def get_contact_with_phone_number(number): ...
def get_contact_name(email_id): ...
def get_contacts_linking_to(doctype, docname, fields=...):
    """Return a list of contacts containing a link to the given document."""
    ...

def get_contacts_linked_from(doctype, docname, fields=...):  # -> list[Unknown]:
    """Return a list of contacts that are contained in (linked from) the given document."""
    ...
