"""
This type stub file was generated by pyright.
"""

from oauthlib.openid import RequestValidator

class OAuthWebRequestValidator(RequestValidator):
    def validate_client_id(self, client_id, request, *args, **kwargs): ...
    def validate_redirect_uri(
        self, client_id, redirect_uri, request, *args, **kwargs
    ): ...
    def get_default_redirect_uri(self, client_id, request, *args, **kwargs): ...
    def validate_scopes(self, client_id, scopes, client, request, *args, **kwargs): ...
    def get_default_scopes(self, client_id, request, *args, **kwargs): ...
    def validate_response_type(
        self, client_id, response_type, client, request, *args, **kwargs
    ): ...
    def save_authorization_code(self, client_id, code, request, *args, **kwargs): ...
    def authenticate_client(self, request, *args, **kwargs): ...
    def authenticate_client_id(self, client_id, request, *args, **kwargs): ...
    def validate_code(self, client_id, code, client, request, *args, **kwargs): ...
    def confirm_redirect_uri(
        self, client_id, code, redirect_uri, client, *args, **kwargs
    ): ...
    def validate_grant_type(
        self, client_id, grant_type, client, request, *args, **kwargs
    ): ...
    def save_bearer_token(self, token, request, *args, **kwargs): ...
    def invalidate_authorization_code(
        self, client_id, code, request, *args, **kwargs
    ): ...
    def validate_bearer_token(self, token, scopes, request): ...
    def get_original_scopes(self, refresh_token, request, *args, **kwargs): ...
    def revoke_token(
        self, token, token_type_hint, request, *args, **kwargs
    ):  # -> None:
        """Revoke an access or refresh token.

        :param token: The token string.
        :param token_type_hint: access_token or refresh_token.
        :param request: The HTTP Request (oauthlib.common.Request)

        Method is used by:
        - Revocation Endpoint
        """
        ...
    def validate_refresh_token(
        self, refresh_token, client, request, *args, **kwargs
    ):  # -> bool:
        """Ensure the Bearer token is valid and authorized access to scopes.

        OBS! The request.user attribute should be set to the resource owner
        associated with this refresh token.

        :param refresh_token: Unicode refresh token
        :param client: Client object set by you, see authenticate_client.
        :param request: The HTTP Request (oauthlib.common.Request)
        :rtype: True or False

        Method is used by:
        - Authorization Code Grant (indirectly by issuing refresh tokens)
        - Resource Owner Password Credentials Grant (also indirectly)
        - Refresh Token Grant
        """
        ...
    def finalize_id_token(self, id_token, token, token_handler, request): ...
    def get_authorization_code_nonce(self, client_id, code, redirect_uri, request): ...
    def get_authorization_code_scopes(self, client_id, code, redirect_uri, request): ...
    def get_jwt_bearer_token(self, token, token_handler, request): ...
    def get_userinfo_claims(self, request): ...
    def validate_id_token(self, token, scopes, request): ...
    def validate_jwt_bearer_token(self, token, scopes, request): ...
    def validate_silent_authorization(self, request):  # -> None:
        """Ensure the logged in user has authorized silent OpenID authorization.

        Silent OpenID authorization allows access tokens and id tokens to be
        granted to clients without any user prompt or interaction.

        :param request: The HTTP Request (oauthlib.common.Request)
        :rtype: True or False

        Method is used by:
        - OpenIDConnectAuthCode
        - OpenIDConnectImplicit
        - OpenIDConnectHybrid
        """
        ...
    def validate_silent_login(self, request):  # -> bool:
        """Ensure session user has authorized silent OpenID login.

        If no user is logged in or has not authorized silent login, this
        method should return False.

        If the user is logged in but associated with multiple accounts and
        not selected which one to link to the token then this method should
        raise an oauthlib.oauth2.AccountSelectionRequired error.

        :param request: The HTTP Request (oauthlib.common.Request)
        :rtype: True or False

        Method is used by:
        - OpenIDConnectAuthCode
        - OpenIDConnectImplicit
        - OpenIDConnectHybrid
        """
        ...
    def validate_user_match(self, id_token_hint, scopes, claims, request):  # -> bool:
        """Ensure client supplied user id hint matches session user.

        If the sub claim or id_token_hint is supplied then the session
        user must match the given ID.

        :param id_token_hint: User identifier string.
        :param scopes: List of OAuth 2 scopes and OpenID claims (strings).
        :param claims: OpenID Connect claims dict.
        :param request: The HTTP Request (oauthlib.common.Request)
        :rtype: True or False

        Method is used by:
        - OpenIDConnectAuthCode
        - OpenIDConnectImplicit
        - OpenIDConnectHybrid
        """
        ...
    def validate_user(
        self, username, password, client, request, *args, **kwargs
    ):  # -> bool:
        """Ensure the username and password is valid.

        Method is used by:
        - Resource Owner Password Credentials Grant
        """
        ...

def get_cookie_dict_from_headers(r): ...
def calculate_at_hash(access_token, hash_alg):  # -> str:
    """Helper method for calculating an access token
    hash, as described in http://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken
    Its value is the base64url encoding of the left-most half of the hash of the octets
    of the ASCII representation of the access_token value, where the hash algorithm
    used is the hash algorithm used in the alg Header Parameter of the ID Token's JOSE
    Header. For instance, if the alg is RS256, hash the access_token value with SHA-256,
    then take the left-most 128 bits and base64url encode them. The at_hash value is a
    case sensitive string.
    Args:
    access_token (str): An access token string.
    hash_alg (callable): A callable returning a hash object, e.g. hashlib.sha256
    """
    ...

def delete_oauth2_data(): ...
def get_client_scopes(client_id): ...
def get_userinfo(user): ...
def get_url_delimiter(separator_character=...): ...
def generate_json_error_response(e): ...
def get_server_url(): ...
