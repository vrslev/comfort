"""
This type stub file was generated by pyright.
"""

import unittest

click_ctx = ...
if click_ctx: ...

class ParallelTestRunner:
    def __init__(
        self, app, site, build_number=..., total_builds=..., with_coverage=...
    ) -> None: ...
    def setup_test_site(self): ...
    def before_test_setup(self): ...
    def run_tests(self): ...
    def run_tests_for_file(self, file_info): ...
    def create_test_dependency_records(self, module, path, filename): ...
    def get_module(self, path, filename): ...
    def print_result(self): ...
    def start_coverage(self): ...
    def save_coverage(self): ...
    def get_test_file_list(self): ...

class ParallelTestResult(unittest.TextTestResult):
    def startTest(self, test): ...
    def getTestMethodName(self, test): ...
    def addSuccess(self, test): ...
    def addError(self, test, err): ...
    def addFailure(self, test, err): ...
    def addSkip(self, test, reason): ...
    def addExpectedFailure(self, test, err): ...
    def addUnexpectedSuccess(self, test): ...
    def printErrors(self): ...
    def printErrorList(self, flavour, errors, color): ...
    def __str__(self) -> str: ...

def get_all_tests(app): ...

class ParallelTestWithOrchestrator(ParallelTestRunner):
    """
    This can be used to balance-out test time across multiple instances
    This is dependent on external orchestrator which returns next test to run

    orchestrator endpoints
    - register-instance (<build_id>, <instance_id>, test_spec_list)
    - get-next-test-spec (<build_id>, <instance_id>)
    - test-completed (<build_id>, <instance_id>)
    """

    def __init__(self, app, site, with_coverage=...) -> None: ...
    def run_tests(self): ...
    def get_test_file_list(self): ...
    def register_instance(self): ...
    def get_next_test(self): ...
    def print_result(self): ...
    def call_orchestrator(self, endpoint, data=...): ...
