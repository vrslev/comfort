"""
This type stub file was generated by pyright.
"""

import frappe

no_cache = ...
base_template_path = ...
standard_format = ...

def get_context(context):  # -> dict[str, str] | dict[str, Unknown | bool]:
    """Build context for print"""
    ...

def get_print_format_doc(print_format_name, meta):  # -> None:
    """Returns print format document"""
    ...

def get_rendered_template(
    doc,
    name=...,
    print_format=...,
    meta=...,
    no_letterhead=...,
    letterhead=...,
    trigger_print=...,
    settings=...,
): ...
def convert_markdown(doc, meta):  # -> None:
    """Convert text field values to markdown if necessary"""
    ...

@frappe.whitelist()
def get_html_and_style(
    doc,
    name=...,
    print_format=...,
    meta=...,
    no_letterhead=...,
    letterhead=...,
    trigger_print=...,
    style=...,
    settings=...,
    templates=...,
):  # -> dict[str, Unknown | None]:
    """Returns `html` and `style` of print format, used in PDF etc"""
    ...

@frappe.whitelist()
def get_rendered_raw_commands(
    doc, name=..., print_format=..., meta=..., lang=...
):  # -> dict[str, Unknown]:
    """Returns Rendered Raw Commands of print format, used to send directly to printer"""
    ...

def validate_print_permission(doc): ...
def get_letter_head(doc, no_letterhead, letterhead=...): ...
def get_print_format(doctype, print_format): ...
def make_layout(doc, meta, format_data=...):  # -> list[Unknown]:
    """Builds a hierarchical layout object from the fields list to be rendered
    by `standard.html`

    :param doc: Document to be rendered.
    :param meta: Document meta object (doctype).
    :param format_data: Fields sequence and properties defined by Print Format Builder."""
    ...

def is_visible(df, doc):  # -> bool:
    """Returns True if docfield is visible in print layout and does not have print_hide set."""
    ...

def has_value(df, doc): ...
def get_print_style(style=..., print_format=..., for_legacy=...): ...
def get_font(print_settings, print_format=..., for_legacy=...): ...
def get_visible_columns(data, table_meta, df):  # -> list[Unknown]:
    """Returns list of visible columns based on print_hide and if all columns have value."""
    ...

def column_has_value(data, fieldname, col_df):  # -> bool:
    """Check if at least one cell in column has non-zero and non-blank value"""
    ...

trigger_print_script = ...
