"""
This type stub file was generated by pyright.
"""

from frappe.model import default_fields
from frappe.model.document import Document

"""
Load metadata (DocType) class

Example:

	meta = frappe.get_meta('User')
	if meta.has_field('first_name'):
		print("DocType" table has field "first_name")


"""

def get_meta(doctype, cached=...): ...
def load_meta(doctype): ...
def get_table_columns(doctype): ...
def load_doctype_from_file(doctype): ...

class Meta(Document):
    _metaclass = ...
    default_fields = ...
    special_doctypes = ...
    def __init__(self, doctype) -> None: ...
    def load_from_db(self): ...
    def process(self): ...
    def as_dict(self, no_nulls=...): ...
    def get_link_fields(self): ...
    def get_data_fields(self): ...
    def get_dynamic_link_fields(self): ...
    def get_select_fields(self): ...
    def get_image_fields(self): ...
    def get_set_only_once_fields(
        self,
    ):  # -> Any | Dict[str, Any] | list[Unknown] | None:
        """Return fields with `set_only_once` set"""
        ...
    def get_table_fields(self): ...
    def get_global_search_fields(
        self,
    ):  # -> Any | Dict[str, Any] | list[Unknown] | None:
        """Returns list of fields with `in_global_search` set and `name` if set"""
        ...
    def get_valid_columns(self): ...
    def get_table_field_doctype(self, fieldname): ...
    def get_field(self, fieldname):  # -> None:
        """Return docfield from meta"""
        ...
    def has_field(self, fieldname):  # -> bool:
        """Returns True if fieldname exists"""
        ...
    def get_label(self, fieldname):
        """Get label of the given fieldname"""
        ...
    def get_options(self, fieldname): ...
    def get_link_doctype(self, fieldname): ...
    def get_search_fields(self): ...
    def get_fields_to_fetch(self, link_fieldname=...):  # -> list[Unknown]:
        """Returns a list of docfield objects for fields whose values
        are to be fetched and updated for a particular link field

        These fields are of type Data, Link, Text, Readonly and their
        fetch_from property is set as `link_fieldname`.`source_fieldname`"""
        ...
    def get_list_fields(self): ...
    def get_custom_fields(self): ...
    def get_title_field(self):  # -> Any | Literal['name', 'title']:
        """Return the title field of this doctype,
        explict via `title_field`, or `title` or `name`"""
        ...
    def get_translatable_fields(self):  # -> list[Unknown]:
        """Return all fields that are translation enabled"""
        ...
    def is_translatable(self, fieldname):  # -> None:
        """Return true of false given a field"""
        ...
    def get_workflow(self): ...
    def add_custom_fields(self): ...
    def apply_property_setters(self):  # -> None:
        """
        Property Setters are set via Customize Form. They override standard properties
        of the doctype or its child properties like fields, links etc. This method
        applies the customized properties over the standard meta object
        """
        ...
    def add_custom_links_and_actions(self): ...
    def sort_fields(self):  # -> None:
        """sort on basis of insert_after"""
        ...
    def set_custom_permissions(self):  # -> None:
        """Reset `permissions` with Custom DocPerm if exists"""
        ...
    def get_fieldnames_with_value(self, with_field_meta=...): ...
    def get_fields_to_check_permissions(self, user_permission_doctypes): ...
    def get_high_permlevel_fields(self):  # -> list[Unknown]:
        """Build list of fields with high perm level and all the higher perm levels defined."""
        ...
    def get_permlevel_access(self, permission_type=..., parenttype=...): ...
    def get_permissions(self, parenttype=...): ...
    def get_dashboard_data(self):
        """Returns dashboard setup related to this doctype.

        This method will return the `data` property in the `[doctype]_dashboard.py`
        file in the doctype's folder, along with any overrides or extensions
        implemented in other Frappe applications via hooks.
        """
        ...
    def add_doctype_links(self, data):  # -> None:
        """add `links` child table in standard link dashboard format"""
        ...
    def get_row_template(self): ...
    def get_list_template(self): ...
    def get_web_template(self, suffix=...):  # -> str | None:
        """Returns the relative path of the row template for this doctype"""
        ...
    def is_nested_set(self): ...

DOCTYPE_TABLE_FIELDS = ...

def is_single(doctype): ...
def get_parent_dt(dt): ...
def set_fieldname(field_id, fieldname): ...
def get_field_currency(df, doc=...):  # -> None:
    """get currency based on DocField options and fieldvalue in doc"""
    ...

def get_field_precision(df, doc=..., currency=...):  # -> int:
    """get precision based on DocField options and fieldvalue in doc"""
    ...

def get_default_df(fieldname): ...
def trim_tables(doctype=...):  # -> None:
    """
    Removes database fields that don't exist in the doctype (json or custom field). This may be needed
    as maintenance since removing a field in a DocType doesn't automatically
    delete the db field.
    """
    ...
