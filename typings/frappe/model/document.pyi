"""
This type stub file was generated by pyright.
"""

from frappe.model.base_document import BaseDocument

"""
This type stub file was generated by pyright.
"""

def get_doc(*args, **kwargs):
    """returns a frappe.model.Document object.

    :param arg1: Document dict or DocType name.
    :param arg2: [optional] document name.
    :param for_update: [optional] select document for update.

    There are multiple ways to call `get_doc`

            # will fetch the latest user object (with child table) from the database
            user = get_doc("User", "test@example.com")

            # create a new object
            user = get_doc({
                    "doctype":"User"
                    "email_id": "test@example.com",
                    "roles: [
                            {"role": "System Manager"}
                    ]
            })

            # create new object with keyword arguments
            user = get_doc(doctype='User', email_id='test@example.com')

            # select a document for update
            user = get_doc("User", "test@example.com", for_update=True)
    """
    ...

class Document(BaseDocument):
    """All controllers inherit from `Document`."""

    def __init__(self, *args, **kwargs) -> None:
        """Constructor.

        :param arg1: DocType name as string or document **dict**
        :param arg2: Document name, if `arg1` is DocType name.

        If DocType name and document name are passed, the object will load
        all values (including child documents) from the database.
        """
        ...
    @staticmethod
    def whitelist(fn):
        """Decorator: Whitelist method to be called remotely via REST API."""
        ...
    def reload(self):
        """Reload document from database"""
        ...
    def load_from_db(self):
        """Load document and children from database and create properties
        from fields"""
        ...
    def get_latest(self): ...
    def check_permission(self, permtype=..., permlevel=...):
        """Raise `frappe.PermissionError` if not permitted"""
        ...
    def has_permission(self, permtype=..., verbose=...):
        """Call `frappe.has_permission` if `self.flags.ignore_permissions`
        is not set.

        :param permtype: one of `read`, `write`, `submit`, `cancel`, `delete`"""
        ...
    def raise_no_permission_to(self, perm_type):
        """Raise `frappe.PermissionError`."""
        ...
    def insert(
        self,
        ignore_permissions=...,
        ignore_links=...,
        ignore_if_duplicate=...,
        ignore_mandatory=...,
        set_name=...,
        set_child_names=...,
    ):
        """Insert the document in the database (as a new document).
        This will check for user permissions and execute `before_insert`,
        `validate`, `on_update`, `after_insert` methods if they are written.

        :param ignore_permissions: Do not check permissions if True."""
        ...
    def save(self, *args, **kwargs):
        """Wrapper for _save"""
        ...
    def copy_attachments_from_amended_from(self):
        """Copy attachments from `amended_from`"""
        ...
    def update_children(self):
        """update child tables"""
        ...
    def update_child_table(self, fieldname, df=...):
        """sync child table for given fieldname"""
        ...
    def get_doc_before_save(self): ...
    def has_value_changed(self, fieldname):
        """Returns true if value is changed before and after saving"""
        ...
    def set_new_name(self, force=..., set_name=..., set_child_names=...):
        """Calls `frappe.naming.set_new_name` for parent and child docs."""
        ...
    def get_title(self):
        """Get the document title based on title_field or `title` or `name`"""
        ...
    def set_title_field(self):
        """Set title field based on template"""
        ...
    def update_single(self, d):
        """Updates values for Single type Document in `tabSingles`."""
        ...
    def set_user_and_timestamp(self): ...
    def set_docstatus(self): ...
    def validate_workflow(self):
        """Validate if the workflow transition is valid"""
        ...
    def validate_set_only_once(self):
        """Validate that fields are not changed if not in insert"""
        ...
    def is_child_table_same(self, fieldname):
        """Validate child table is same as original table before saving"""
        ...
    def apply_fieldlevel_read_permissions(self):
        """Remove values the user is not allowed to read (called when loading in desk)"""
        ...
    def validate_higher_perm_levels(self):
        """If the user does not have permissions at permlevel > 0, then reset the values to original / default"""
        ...
    def get_permlevel_access(self, permission_type=...): ...
    def has_permlevel_access_to(self, fieldname, df=..., permission_type=...): ...
    def get_permissions(self): ...
    def check_if_latest(self):
        """Checks if `modified` timestamp provided by document being updated is same as the
        `modified` timestamp in the database. If there is a different, the document has been
        updated in the database after the current copy was read. Will throw an error if
        timestamps don't match.

        Will also validate document transitions (Save > Submit > Cancel) calling
        `self.check_docstatus_transition`."""
        ...
    def check_docstatus_transition(self, docstatus):
        """Ensures valid `docstatus` transition.
        Valid transitions are (number in brackets is `docstatus`):

        - Save (0) > Save (0)
        - Save (0) > Submit (1)
        - Submit (1) > Submit (1)
        - Submit (1) > Cancel (2)

        """
        ...
    def set_parent_in_children(self):
        """Updates `parent` and `parenttype` property in all children."""
        ...
    def set_name_in_children(self): ...
    def validate_update_after_submit(self): ...
    def get_all_children(self, parenttype=...):
        """Returns all children documents from **Table** type field in a list."""
        ...
    def run_method(self, method, *args, **kwargs):
        """run standard triggers, plus those in hooks"""
        ...
    def run_trigger(self, method, *args, **kwargs): ...
    def run_notifications(self, method):
        """Run notifications for this method"""
        ...
    @whitelist.__func__
    def submit(self):
        """Submit the document. Sets `docstatus` = 1, then saves."""
        ...
    @whitelist.__func__
    def cancel(self):
        """Cancel the document. Sets `docstatus` = 2, then saves."""
        ...
    def delete(self, ignore_permissions=...):
        """Delete document."""
        ...
    def run_before_save_methods(self):
        """Run standard methods before  `INSERT` or `UPDATE`. Standard Methods are:

        - `validate`, `before_save` for **Save**.
        - `validate`, `before_submit` for **Submit**.
        - `before_cancel` for **Cancel**
        - `before_update_after_submit` for **Update after Submit**

        Will also update title_field if set"""
        ...
    def load_doc_before_save(self):
        """Save load document from db before saving"""
        ...
    def run_post_save_methods(self):
        """Run standard methods after `INSERT` or `UPDATE`. Standard Methods are:

        - `on_update` for **Save**.
        - `on_update`, `on_submit` for **Submit**.
        - `on_cancel` for **Cancel**
        - `update_after_submit` for **Update after Submit**"""
        ...
    def clear_cache(self): ...
    def reset_seen(self):
        """Clear _seen property and set current user as seen"""
        ...
    def notify_update(self):
        """Publish realtime that the current document is modified"""
        ...
    def db_set(self, fieldname, value=..., update_modified=..., notify=..., commit=...):
        """Set a value in the document object, update the timestamp and update the database.

        WARNING: This method does not trigger controller validations and should
        be used very carefully.

        :param fieldname: fieldname of the property to be updated, or a {"field":"value"} dictionary
        :param value: value of the property to be updated
        :param update_modified: default True. updates the `modified` and `modified_by` properties
        :param notify: default False. run doc.notify_updated() to send updates via socketio
        :param commit: default False. run frappe.db.commit()
        """
        ...
    def db_get(self, fieldname):
        """get database value for this fieldname"""
        ...
    def check_no_back_links_exist(self):
        """Check if document links to any active document before Cancel."""
        ...
    def save_version(self):
        """Save version info"""
        ...
    @staticmethod
    def hook(f):
        """Decorator: Make method `hookable` (i.e. extensible by another app).

        Note: If each hooked method returns a value (dict), then all returns are
        collated in one dict and returned. Ideally, don't return values in hookable
        methods, set properties in the document."""
        ...
    def is_whitelisted(self, method_name): ...
    def validate_value(self, fieldname, condition, val2, doc=..., raise_exception=...):
        """Check that value of fieldname should be 'condition' val2
        else throw Exception."""
        ...
    def validate_table_has_rows(self, parentfield, raise_exception=...):
        """Raise exception if Table field is empty."""
        ...
    def round_floats_in(self, doc, fieldnames=...):
        """Round floats for all `Currency`, `Float`, `Percent` fields for the given doc.

        :param doc: Document whose numeric properties are to be rounded.
        :param fieldnames: [Optional] List of fields to be rounded."""
        ...
    def get_url(self):
        """Returns Desk URL for this document."""
        ...
    def add_comment(
        self,
        comment_type=...,
        text=...,
        comment_email=...,
        link_doctype=...,
        link_name=...,
        comment_by=...,
    ):
        """Add a comment to this document.

        :param comment_type: e.g. `Comment`. See Communication for more info."""
        ...
    def add_seen(self, user=...):
        """add the given/current user to list of users who have seen this document (_seen)"""
        ...
    def add_viewed(self, user=...):
        """add log to communication when a user views a document"""
        ...
    def get_signature(self):
        """Returns signature (hash) for private URL."""
        ...
    def get_liked_by(self): ...
    def set_onload(self, key, value): ...
    def get_onload(self, key=...): ...
    def queue_action(self, action, **kwargs):
        """Run an action in background. If the action has an inner function,
        like _submit for submit, it will call that instead"""
        ...
    def lock(self, timeout=...):
        """Creates a lock file for the given document. If timeout is set,
        it will retry every 1 second for acquiring the lock again

        :param timeout: Timeout in seconds, default 0"""
        ...
    def unlock(self):
        """Delete the lock file for this document"""
        ...
    def validate_from_to_dates(self, from_date_field, to_date_field):
        """
        Generic validation to verify date sequence
        """
        ...
    def get_assigned_users(self): ...
    def add_tag(self, tag):
        """Add a Tag to this document"""
        ...
    def get_tags(self):
        """Return a list of Tags attached to this document"""
        ...
    def __repr__(self): ...
    def __str__(self) -> str: ...

def execute_action(doctype, name, action, **kwargs):
    """Execute an action on a document (called by background worker)"""
    ...
