"""
This type stub file was generated by pyright.
"""

class AuthError(Exception): ...
class SiteExpiredError(Exception): ...
class SiteUnreachableError(Exception): ...
class FrappeException(Exception): ...

class FrappeClient:
    def __init__(
        self,
        url,
        username=...,
        password=...,
        verify=...,
        api_key=...,
        api_secret=...,
        frappe_authorization_source=...,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs): ...
    def setup_key_authentication_headers(self): ...
    def logout(self):  # -> None:
        """Logout session"""
        ...
    def get_list(
        self, doctype, fields=..., filters=..., limit_start=..., limit_page_length=...
    ):  # -> Any | None:
        """Returns list of records of a particular type"""
        ...
    def insert(self, doc):
        """Insert a document to the remote server

        :param doc: A dict or Document object to be inserted remotely"""
        ...
    def insert_many(self, docs):  # -> Any | None:
        """Insert multiple documents to the remote server

        :param docs: List of dict or Document objects to be inserted in one request"""
        ...
    def update(self, doc):
        """Update a remote document

        :param doc: dict or Document object to be updated remotely. `name` is mandatory for this"""
        ...
    def bulk_update(self, docs):  # -> Any | None:
        """Bulk update documents remotely

        :param docs: List of dict or Document objects to be updated remotely (by `name`)"""
        ...
    def delete(self, doctype, name):  # -> Any | None:
        """Delete remote document by name

        :param doctype: `doctype` to be deleted
        :param name: `name` of document to be deleted"""
        ...
    def submit(self, doc):  # -> Any | None:
        """Submit remote document

        :param doc: dict or Document object to be submitted remotely"""
        ...
    def get_value(self, doctype, fieldname=..., filters=...):  # -> Any | None:
        """Returns a value form a document

        :param doctype: DocType to be queried
        :param fieldname: Field to be returned (default `name`)
        :param filters: dict or string for identifying the record"""
        ...
    def set_value(self, doctype, docname, fieldname, value):  # -> Any | None:
        """Set a value in a remote document

        :param doctype: DocType of the document to be updated
        :param docname: name of the document to be updated
        :param fieldname: fieldname of the document to be updated
        :param value: value to be updated"""
        ...
    def cancel(self, doctype, name):  # -> Any | None:
        """Cancel a remote document

        :param doctype: DocType of the document to be cancelled
        :param name: name of the document to be cancelled"""
        ...
    def get_doc(self, doctype, name=..., filters=..., fields=...):  # -> Any | None:
        """Returns a single remote document

        :param doctype: DocType of the document to be returned
        :param name: (optional) `name` of the document to be returned
        :param filters: (optional) Filter by this dict if name is not set
        :param fields: (optional) Fields to be returned, will return everythign if not set"""
        ...
    def rename_doc(self, doctype, old_name, new_name):  # -> Any | None:
        """Rename remote document

        :param doctype: DocType of the document to be renamed
        :param old_name: Current `name` of the document to be renamed
        :param new_name: New `name` to be set"""
        ...
    def migrate_doctype(
        self, doctype, filters=..., update=..., verbose=..., exclude=..., preprocess=...
    ):  # -> None:
        """Migrate records from another doctype"""
        ...
    def migrate_single(self, doctype): ...
    def get_api(self, method, params=...): ...
    def post_api(self, method, params=...): ...
    def get_request(self, params): ...
    def post_request(self, data): ...
    def preprocess(self, params):
        """convert dicts, lists to json"""
        ...
    def post_process(self, response): ...

class FrappeOAuth2Client(FrappeClient):
    def __init__(self, url, access_token, verify=...) -> None: ...
    def get_request(self, params): ...
    def post_request(self, data): ...

class OAuth2Session:
    def __init__(self, headers) -> None: ...
    def get(self, url, params, verify): ...
    def post(self, url, data, verify): ...
    def put(self, url, data, verify): ...
