"""
This type stub file was generated by pyright.
"""

import frappe

def guess_language(lang_list=...):  # -> text_type:
    """Set `frappe.local.lang` from HTTP headers at beginning of request"""
    ...

def get_user_lang(user=...):  # -> Literal['en']:
    """Set frappe.local.lang from user preferences on session beginning or resumption"""
    ...

def get_lang_code(lang): ...
def set_default_language(lang):  # -> None:
    """Set Global default language"""
    ...

def get_lang_dict():  # -> dict[Unknown, Unknown]:
    """Returns all languages in dict format, full name is the key e.g. `{"english":"en"}`"""
    ...

def get_dict(fortype, name=...):  # -> Any:
    """Returns translation dict for a type of object.

    :param fortype: must be one of `doctype`, `page`, `report`, `include`, `jsfile`, `boot`
    :param name: name of the document for which assets are to be returned.
    """
    ...

def get_dict_from_hooks(fortype, name): ...
def make_dict_from_messages(
    messages, full_dict=..., load_user_translation=...
):  # -> dict[Unknown, Unknown]:
    """Returns translated messages as a dict in Language specified in `frappe.local.lang`

    :param messages: List of untranslated messages
    """
    ...

def get_lang_js(fortype, name):  # -> str:
    """Returns code snippet to be appended at the end of a JS script.

    :param fortype: Type of object, e.g. `DocType`
    :param name: Document name
    """
    ...

def get_full_dict(lang):  # -> dict[Unknown, Unknown]:
    """Load and return the entire translations dictionary for a language from :meth:`frape.cache`

    :param lang: Language Code, e.g. `hi`
    """
    ...

def load_lang(lang, apps=...):  # -> dict[Unknown, Unknown]:
    """Combine all translations from `.csv` files in all `apps`.
    For derivative languages (es-GT), take translations from the
    base language (es) and then update translations from the child (es-GT)"""
    ...

def get_translation_dict_from_file(path, lang, app):  # -> dict[Unknown, Unknown]:
    """load translation dict from given path"""
    ...

def get_user_translations(lang): ...
def clear_cache():  # -> None:
    """Clear all translation assets from :meth:`frappe.cache`"""
    ...

def get_messages_for_app(app, deduplicate=...):  # -> list[Unknown]:
    """Returns all messages (list) for a specified `app`"""
    ...

def get_messages_from_navbar():  # -> list[tuple[Literal['Navbar:'], Unknown, Literal['Label of a Navbar Item']]]:
    """Return all labels from Navbar Items, as specified in Navbar Settings."""
    ...

def get_messages_from_doctype(name):  # -> list[tuple[Unknown, Unknown]]:
    """Extract all translatable messages for a doctype. Includes labels, Python code,
    Javascript code, html templates"""
    ...

def get_messages_from_workflow(doctype=..., app_name=...): ...
def get_messages_from_custom_fields(app_name): ...
def get_messages_from_page(name):  # -> list[tuple[str, Unknown, Unknown, Unknown]]:
    """Returns all translatable strings from a :class:`frappe.core.doctype.Page`"""
    ...

def get_messages_from_report(name):  # -> list[tuple[str, Unknown, Unknown, Unknown]]:
    """Returns all translatable strings from a :class:`frappe.core.doctype.Report`"""
    ...

def get_server_messages(app):  # -> list[Unknown]:
    """Extracts all translatable strings (tagged with :func:`frappe._`) from Python modules
    inside an app"""
    ...

def get_messages_from_include_files(app_name=...):  # -> list[Unknown]:
    """Returns messages from js files included at time of boot like desk.min.js for desk and web"""
    ...

def get_all_messages_from_js_files(app_name=...):  # -> list[Unknown]:
    """Extracts all translatable strings from app `.js` files"""
    ...

def get_messages_from_file(path):  # -> list[tuple[str, Unknown, Unknown, Unknown]]:
    """Returns a list of transatable strings from a code file

    :param path: path of the code file
    """
    ...

def extract_messages_from_code(code):  # -> list[Unknown]:
    """
    Extracts translatable strings from a code file
    :param code: code from which translatable files are to be extracted
    :param is_py: include messages in triple quotes e.g. `_('''message''')`
    """
    ...

def is_translatable(m): ...
def add_line_number(messages, code): ...
def read_csv_file(path):  # -> list[list[text_type]]:
    """Read CSV file and return as list of list

    :param path: File path"""
    ...

def write_csv_file(path, app_messages, lang_dict):  # -> None:
    """Write translation CSV file.

    :param path: File path, usually `[app]/translations`.
    :param app_messages: Translatable strings for this app.
    :param lang_dict: Full translated dict.
    """
    ...

def get_untranslated(lang, untranslated_file, get_all=...):  # -> None:
    """Returns all untranslated strings for a language and writes in a file

    :param lang: Language code.
    :param untranslated_file: Output file path.
    :param get_all: Return all strings, translated or not."""
    ...

def update_translations(lang, untranslated_file, translated_file):  # -> None:
    """Update translations from a source and target file for a given language.

    :param lang: Language code (e.g. `en`).
    :param untranslated_file: File path with the messages in English.
    :param translated_file: File path with messages in language to be updated."""
    ...

def import_translations(lang, path):  # -> None:
    """Import translations from file in standard format"""
    ...

def rebuild_all_translation_files():  # -> None:
    """Rebuild all translation files: `[app]/translations/[lang].csv`."""
    ...

def write_translations_file(app, lang, full_dict=..., app_messages=...):  # -> None:
    """Write a translation file for a given language.

    :param app: `app` for which translations are to be written.
    :param lang: Language code.
    :param full_dict: Full translated language dict (optional).
    :param app_messages: Source strings (optional).
    """
    ...

def send_translations(translation_dict):  # -> None:
    """Append translated dict in `frappe.local.response`"""
    ...

def deduplicate_messages(messages): ...
def get_bench_dir(): ...
def rename_language(old_name, new_name): ...
@frappe.whitelist()
def update_translations_for_source(source=..., translation_dict=...): ...
@frappe.whitelist()
def get_translations(source_text): ...
@frappe.whitelist()
def get_messages(language, start=..., page_length=..., search_text=...): ...
@frappe.whitelist()
def get_source_additional_info(source, language=...): ...
@frappe.whitelist()
def get_contributions(language): ...
@frappe.whitelist()
def get_contribution_status(message_id): ...
def get_translator_url(): ...
@frappe.whitelist(allow_guest=True)
def get_all_languages(with_language_name=...):
    """Returns all language codes ar, ch etc"""
    ...

@frappe.whitelist(allow_guest=True)
def set_preferred_language_cookie(preferred_language): ...
