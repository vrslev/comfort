"""
This type stub file was generated by pyright.
"""

def install_db(
    root_login=...,
    root_password=...,
    db_name=...,
    source_sql=...,
    admin_password=...,
    verbose=...,
    force=...,
    site_config=...,
    reinstall=...,
    db_password=...,
    db_type=...,
    db_host=...,
    db_port=...,
    no_mariadb_socket=...,
): ...
def install_app(name, verbose=..., set_as_patched=...): ...
def add_to_installed_apps(app_name, rebuild_website=...): ...
def remove_from_installed_apps(app_name): ...
def remove_app(app_name, dry_run=..., yes=..., no_backup=..., force=...):  # -> None:
    """Remove app and all linked to the app's module with the app from a site."""
    ...

def post_install(rebuild_website=...): ...
def set_all_patches_as_completed(app): ...
def init_singles(): ...
def make_conf(
    db_name=..., db_password=..., site_config=..., db_type=..., db_host=..., db_port=...
): ...
def make_site_config(
    db_name=..., db_password=..., site_config=..., db_type=..., db_host=..., db_port=...
): ...
def update_site_config(key, value, validate=..., site_config_path=...):  # -> None:
    """Update a value in site_config"""
    ...

def get_site_config_path(): ...
def get_conf_params(db_name=..., db_password=...): ...
def make_site_dirs(): ...
def add_module_defs(app): ...
def remove_missing_apps(): ...
def extract_sql_from_archive(sql_file_path):  # -> str:
    """Return the path of an SQL file if the passed argument is the path of a gzipped
    SQL file or an SQL file path. The path may be absolute or relative from the bench
    root directory or the sites sub-directory.

    Args:
            sql_file_path (str): Path of the SQL file

    Returns:
            str: Path of the decompressed SQL file
    """
    ...

def extract_sql_gzip(sql_gz_path): ...
def extract_files(site_name, file_path): ...
def is_downgrade(sql_file_path, verbose=...):  # -> _NotImplementedType | bool | None:
    """checks if input db backup will get downgraded on current bench"""
    ...

def is_partial(sql_file_path): ...
def partial_restore(sql_file_path, verbose=...): ...
def validate_database_sql(path, _raise=...):  # -> None:
    """Check if file has contents and if DefaultValue table exists

    Args:
            path (str): Path of the decompressed SQL file
            _raise (bool, optional): Raise exception if invalid file. Defaults to True.
    """
    ...
