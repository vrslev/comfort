"""
This type stub file was generated by pyright.
"""

import frappe

@frappe.whitelist()
def make(
    doctype=...,
    name=...,
    content=...,
    subject=...,
    sent_or_received=...,
    sender=...,
    sender_full_name=...,
    recipients=...,
    communication_medium=...,
    send_email=...,
    print_html=...,
    print_format=...,
    attachments=...,
    send_me_a_copy=...,
    cc=...,
    bcc=...,
    flags=...,
    read_receipt=...,
    print_letterhead=...,
    email_template=...,
    communication_type=...,
    ignore_permissions=...,
):  # -> dict[str, Unknown | str | None]:
    """Make a new communication.

    :param doctype: Reference DocType.
    :param name: Reference Document name.
    :param content: Communication body.
    :param subject: Communication subject.
    :param sent_or_received: Sent or Received (default **Sent**).
    :param sender: Communcation sender (default current user).
    :param recipients: Communication recipients as list.
    :param communication_medium: Medium of communication (default **Email**).
    :param send_email: Send via email (default **False**).
    :param print_html: HTML Print format to be sent as attachment.
    :param print_format: Print Format name of parent document to be sent as attachment.
    :param attachments: List of attachments as list of files or JSON string.
    :param send_me_a_copy: Send a copy to the sender (default **False**).
    :param email_template: Template which is used to compose mail .
    """
    ...

def validate_email(doc):  # -> None:
    """Validate Email Addresses of Recipients and CC"""
    ...

def notify(
    doc,
    print_html=...,
    print_format=...,
    attachments=...,
    recipients=...,
    cc=...,
    bcc=...,
    fetched_from_email_account=...,
):  # -> None:
    """Calls a delayed task 'sendmail' that enqueus email in Email Queue queue

    :param print_html: Send given value as HTML attachment
    :param print_format: Attach print format of parent document
    :param attachments: A list of filenames that should be attached when sending this email
    :param recipients: Email recipients
    :param cc: Send email as CC to
    :param bcc: Send email as BCC to
    :param fetched_from_email_account: True when pulling email, the notification shouldn't go to the main recipient

    """
    ...

def get_recipients_cc_and_bcc(
    doc, recipients, cc, bcc, fetched_from_email_account=...
): ...
def remove_administrator_from_email_list(email_list): ...
def prepare_to_notify(
    doc, print_html=..., print_format=..., attachments=...
):  # -> None:
    """Prepare to make multipart MIME Email

    :param print_html: Send given value as HTML attachment.
    :param print_format: Attach print format of parent document."""
    ...

def set_incoming_outgoing_accounts(doc): ...
def get_recipients(doc, fetched_from_email_account=...):  # -> list[Unknown]:
    """Build a list of email addresses for To"""
    ...

def get_cc(doc, recipients=..., fetched_from_email_account=...):  # -> list[Unknown]:
    """Build a list of email addresses for CC"""
    ...

def get_bcc(doc, recipients=..., fetched_from_email_account=...):  # -> list[Unknown]:
    """Build a list of email addresses for BCC"""
    ...

def add_attachments(name, attachments):  # -> None:
    """Add attachments to the given Communication"""
    ...

def filter_email_list(doc, email_list, exclude, is_cc=..., is_bcc=...): ...
def get_owner_email(doc): ...
def get_assignees(doc): ...
def get_attach_link(doc, print_format):
    """Returns public link for the attachment via `templates/emails/print_link.html`."""
    ...

def sendmail(
    communication_name,
    print_html=...,
    print_format=...,
    attachments=...,
    recipients=...,
    cc=...,
    bcc=...,
    lang=...,
    session=...,
    print_letterhead=...,
): ...
@frappe.whitelist(allow_guest=True)
def mark_email_as_seen(name=...): ...
