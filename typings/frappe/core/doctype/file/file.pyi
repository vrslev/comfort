"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

"""
record of files

naming for same name files: file.gif, file-1.gif, file-2.gif etc
"""

class MaxFileSizeReachedError(frappe.ValidationError): ...
class FolderNotEmpty(frappe.ValidationError): ...

exclude_from_linked_with = ...

class File(Document):
    no_feed_on_delete = ...
    def before_insert(self): ...
    def get_name_based_on_parent_folder(self): ...
    def autoname(self):  # -> None:
        """Set name for folder"""
        ...
    def after_insert(self): ...
    def after_rename(self, olddn, newdn, merge=...): ...
    def get_successor(self): ...
    def validate(self): ...
    def validate_url(self): ...
    def handle_is_private_changed(self): ...
    def fetch_attached_to_field(self, old_file_url): ...
    def validate_attachment_limit(self): ...
    def set_folder_name(self):  # -> None:
        """Make parent folders if not exists based on reference doctype and name"""
        ...
    def validate_folder(self): ...
    def validate_file(self):  # -> Literal[True] | None:
        """Validates existence of public file
        TODO: validate for private file
        """
        ...
    def validate_duplicate_entry(self): ...
    def set_file_name(self): ...
    def generate_content_hash(self): ...
    def on_trash(self): ...
    def make_thumbnail(
        self, set_as_thumbnail=..., width=..., height=..., suffix=..., crop=...
    ): ...
    def check_folder_is_empty(self):  # -> None:
        """Throw exception if folder is not empty"""
        ...
    def call_delete_file(self):  # -> None:
        """If file not attached to any other record, delete it"""
        ...
    def on_rollback(self): ...
    def unzip(self):  # -> list[Unknown] | None:
        """Unzip current file and replace it by its children"""
        ...
    def get_file_url(self): ...
    def exists_on_disk(self): ...
    def get_content(self):  # -> Any | Dict[str, Any] | bytes | list[Unknown] | None:
        """Returns [`file_name`, `content`] for given file name `fname`"""
        ...
    def get_full_path(self):  # -> str:
        """Returns file path from given file name"""
        ...
    def write_file(self):
        """write file to disk with a random name (to compare)"""
        ...
    def get_file_doc(self):
        """returns File object (Document) from given parameters or form_dict"""
        ...
    def save_uploaded(self): ...
    def get_uploaded_content(self): ...
    def save_file(self, content=..., decode=..., ignore_existing_file_check=...): ...
    def save_file_on_filesystem(self): ...
    def get_file_data_from_hash(self): ...
    def check_max_file_size(self): ...
    def delete_file_data_content(self, only_thumbnail=...): ...
    def delete_file_from_filesystem(self, only_thumbnail=...):  # -> None:
        """Delete file, thumbnail from File document"""
        ...
    def is_downloadable(self): ...
    def get_extension(self):  # -> Tuple[str | Unknown, str | Unknown]:
        """returns split filename and extension"""
        ...
    def add_comment_in_reference_doc(self, comment_type, text): ...
    def set_is_private(self): ...

def on_doctype_update(): ...
def make_home_folder(): ...
@frappe.whitelist()
def create_new_folder(file_name, folder):  # -> None:
    """create new folder under current parent folder"""
    ...

@frappe.whitelist()
def move_file(file_list, new_parent, old_parent): ...
def setup_folder_path(filename, new_parent): ...
def get_extension(filename, extn, content): ...
def get_local_image(file_url): ...
def get_web_image(file_url): ...
def delete_file(path):  # -> None:
    """Delete file from `public folder`"""
    ...

def remove_file(
    fid=...,
    attached_to_doctype=...,
    attached_to_name=...,
    from_delete=...,
    delete_permanently=...,
):  # -> None:
    """Remove file and File entry"""
    ...

def get_max_file_size(): ...
def remove_all(dt, dn, from_delete=..., delete_permanently=...):  # -> None:
    """remove all files in a transaction"""
    ...

def has_permission(doc, ptype=..., user=...): ...
def remove_file_by_url(file_url, doctype=..., name=...): ...
def get_content_hash(content): ...
def get_file_name(fname, optional_suffix): ...
@frappe.whitelist()
def download_file(file_url):  # -> None:
    """
    Download file using token and REST API. Valid session or
    token is required to download private files.

    Method : GET
    Endpoint : frappe.core.doctype.file.file.download_file
    URL Params : file_name = /path/to/file relative to site path
    """
    ...

def extract_images_from_doc(doc, fieldname): ...
def extract_images_from_html(doc, content): ...
def get_random_filename(extn=..., content_type=...): ...
@frappe.whitelist()
def unzip_file(name):  # -> int:
    """Unzip the given file and make file records for each of the extracted files"""
    ...

@frappe.whitelist()
def get_attached_images(doctype, names):  # -> _dict:
    """get list of image urls attached in form
    returns {name: ['image.jpg', 'image.png']}"""
    ...

@frappe.whitelist()
def validate_filename(filename): ...
@frappe.whitelist()
def get_files_in_folder(folder, start=..., page_length=...): ...
@frappe.whitelist()
def get_files_by_search_text(text): ...
def update_existing_file_docs(doc): ...
def attach_files_to_document(doc, event):  # -> None:
    """Runs on on_update hook of all documents.
    Goes through every Attach and Attach Image field and attaches
    the file url to the document if it is not already attached.
    """
    ...
