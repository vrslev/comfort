"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class UserPermission(Document):
    def validate(self): ...
    def on_update(self): ...
    def on_trash(self): ...
    def validate_user_permission(self):  # -> None:
        """checks for duplicate user permission records"""
        ...
    def validate_default_permission(self):  # -> None:
        """validate user permission overlap for default value of a particular doctype"""
        ...

@frappe.whitelist(allow_guest=True)
def get_user_permissions(user=...):  # -> dict[Unknown, Unknown]:
    """Get all users permissions for the user as a dict of doctype"""
    ...

def user_permission_exists(user, allow, for_value, applicable_for=...):  # -> None:
    """Checks if similar user permission already exists"""
    ...

@frappe.whitelist()
@frappe.validate_and_sanitize_search_inputs
def get_applicable_for_doctype_list(
    doctype, txt, searchfield, start, page_len, filters
): ...
def get_permitted_documents(doctype):  # -> list[Any]:
    """Returns permitted documents from the given doctype for the session user"""
    ...

@frappe.whitelist()
def check_applicable_doc_perm(user, doctype, docname): ...
@frappe.whitelist()
def clear_user_permissions(user, for_doctype): ...
@frappe.whitelist()
def add_user_permissions(data):  # -> Literal[1, 0]:
    """Add and update the user permissions"""
    ...

def insert_user_perm(
    user,
    doctype,
    docname,
    is_default=...,
    hide_descendants=...,
    apply_to_all=...,
    applicable=...,
): ...
def remove_applicable(perm_applied_docs, user, doctype, docname): ...
def remove_apply_to_all(user, doctype, docname): ...
def update_applicable(already_applied, to_apply, user, doctype, docname): ...
