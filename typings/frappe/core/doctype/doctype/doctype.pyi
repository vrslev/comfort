"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class InvalidFieldNameError(frappe.ValidationError): ...
class UniqueFieldnameError(frappe.ValidationError): ...
class IllegalMandatoryError(frappe.ValidationError): ...
class DoctypeLinkError(frappe.ValidationError): ...
class WrongOptionsDoctypeLinkError(frappe.ValidationError): ...
class HiddenAndMandatoryWithoutDefaultError(frappe.ValidationError): ...
class NonUniqueError(frappe.ValidationError): ...
class CannotIndexedError(frappe.ValidationError): ...
class CannotCreateStandardDoctypeError(frappe.ValidationError): ...

form_grid_templates = ...

class DocType(Document):
    def get_feed(self): ...
    def validate(self):  # -> None:
        """Validate DocType before saving.

        - Check if developer mode is set.
        - Validate series
        - Check fieldnames (duplication etc)
        - Clear permission table for child tables
        - Add `amended_from` and `amended_by` if Amendable
        - Add custom field `auto_repeat` if Repeatable
        - Check if links point to valid fieldnames"""
        ...
    def validate_field_name_conflicts(self):  # -> None:
        """Check if field names dont conflict with controller properties and methods"""
        ...
    def after_insert(self): ...
    def set_defaults_for_single_and_table(self): ...
    def set_default_in_list_view(self):  # -> None:
        """Set default in-list-view for first 4 mandatory fields"""
        ...
    def set_default_translatable(self):  # -> None:
        """Ensure that non-translatable never will be translatable"""
        ...
    def check_developer_mode(self):  # -> None:
        """Throw exception if not developer mode or via patch"""
        ...
    def setup_fields_to_fetch(self):  # -> None:
        """Setup query to update values for newly set fetch values"""
        ...
    def update_fields_to_fetch(self):  # -> None:
        """Update fetch values based on queries setup"""
        ...
    def validate_document_type(self): ...
    def validate_website(self):  # -> None:
        """Ensure that website generator has field 'route'"""
        ...
    def change_modified_of_parent(self):  # -> None:
        """Change the timestamp of parent DocType if the current one is a child to clear caches."""
        ...
    def scrub_field_names(self):  # -> None:
        """Sluggify fieldnames if not set from Label."""
        ...
    def on_update(self):  # -> None:
        """Update database schema, make controller templates if `custom` is not set and clear cache."""
        ...
    def sync_global_search(self):  # -> None:
        """If global search settings are changed, rebuild search properties for this table"""
        ...
    def set_base_class_for_controller(self):  # -> None:
        """Updates the controller class to subclass from `WebsiteGenertor`,
        if it is a subclass of `Document`"""
        ...
    def run_module_method(self, method): ...
    def before_rename(self, old, new, merge=...):  # -> None:
        """Throw exception if merge. DocTypes cannot be merged."""
        ...
    def after_rename(self, old, new, merge=...):  # -> None:
        """Change table name using `RENAME TABLE` if table exists. Or update
        `doctype` property for Single type."""
        ...
    def after_delete(self): ...
    def rename_files_and_folders(self, old, new): ...
    def rename_inside_controller(self, new, old, new_path): ...
    def before_reload(self):  # -> None:
        """Preserve naming series changes in Property Setter."""
        ...
    def preserve_naming_series_options_in_property_setter(self):  # -> None:
        """Preserve naming_series as property setter if it does not exist"""
        ...
    def before_export(self, docdict): ...
    @staticmethod
    def prepare_for_import(docdict): ...
    def export_doc(self):  # -> None:
        """Export to standard folder `[module]/doctype/[name]/[name].json`."""
        ...
    def import_doc(self):  # -> None:
        """Import from standard folder `[module]/doctype/[name]/[name].json`."""
        ...
    def make_controller_template(self):  # -> None:
        """Make boilerplate controller template."""
        ...
    def make_amendable(self):  # -> None:
        """If is_submittable is set, add amended_from docfields."""
        ...
    def make_repeatable(self):  # -> None:
        """If allow_auto_repeat is set, add auto_repeat custom field."""
        ...
    def validate_nestedset(self): ...
    def add_nestedset_fields(self):  # -> None:
        """If is_tree is set, add parent_field, lft, rgt, is_group fields."""
        ...
    def get_max_idx(self):  # -> Literal[0]:
        """Returns the highest `idx`"""
        ...
    def validate_name(self, name=...): ...

def validate_series(dt, autoname=..., name=...):  # -> None:
    """Validate if `autoname` property is correctly set."""
    ...

def validate_links_table_fieldnames(meta):  # -> None:
    """Validate fieldnames in Links table"""
    ...

def validate_fields_for_doctype(doctype): ...
def validate_fields(meta):  # -> None:
    """Validate doctype fields. Checks
    1. There are no illegal characters in fieldnames
    2. If fieldnames are unique.
    3. Validate column length.
    4. Fields that do have database columns are not mandatory.
    5. `Link` and `Table` options are valid.
    6. **Hidden** and **Mandatory** are not set simultaneously.
    7. `Check` type field has default as 0 or 1.
    8. `Dynamic Links` are correctly defined.
    9. Precision is set in numeric fields and is between 1 & 6.
    10. Fold is not at the end (if set).
    11. `search_fields` are valid.
    12. `title_field` and title field pattern are valid.
    13. `unique` check is only valid for Data, Link and Read Only fieldtypes.
    14. `unique` cannot be checked if there exist non-unique values.

    :param meta: `frappe.model.meta.Meta` object to check."""
    ...

def validate_permissions_for_doctype(doctype, for_remove=..., alert=...):  # -> None:
    """Validates if permissions are set correctly."""
    ...

def clear_permissions_cache(doctype): ...
def validate_permissions(doctype, for_remove=..., alert=...): ...
def make_module_and_roles(doc, perm_fieldname=...):  # -> None:
    """Make `Module Def` and `Role` records if already not made. Called while installing."""
    ...

def check_fieldname_conflicts(doctype, fieldname):  # -> None:
    """Checks if fieldname conflicts with methods or properties"""
    ...

def clear_linked_doctype_cache(): ...
def check_email_append_to(doc): ...
def get_field(doc, fieldname): ...
