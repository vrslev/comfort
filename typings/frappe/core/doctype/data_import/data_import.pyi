"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class DataImport(Document):
    def validate(self): ...
    def validate_import_file(self): ...
    def validate_google_sheets_url(self): ...
    @frappe.whitelist()
    def get_preview_from_template(self, import_file=..., google_sheets_url=...): ...
    def start_import(self): ...
    def export_errored_rows(self): ...
    def get_importer(self): ...

@frappe.whitelist()
def get_preview_from_template(data_import, import_file=..., google_sheets_url=...): ...
@frappe.whitelist()
def form_start_import(data_import): ...
def start_import(data_import):  # -> None:
    """This method runs in background job"""
    ...

@frappe.whitelist()
def download_template(
    doctype, export_fields=..., export_records=..., export_filters=..., file_type=...
):  # -> None:
    """
    Download template from Exporter
            :param doctype: Document Type
            :param export_fields=None: Fields to export as dict {'Sales Invoice': ['name', 'customer'], 'Sales Invoice Item': ['item_code']}
            :param export_records=None: One of 'all', 'by_filter', 'blank_template'
            :param export_filters: Filter dict
            :param file_type: File type to export into
    """
    ...

@frappe.whitelist()
def download_errored_template(data_import_name): ...
def import_file(
    doctype, file_path, import_type, submit_after_import=..., console=...
):  # -> None:
    """
    Import documents in from CSV or XLSX using data import.

    :param doctype: DocType to import
    :param file_path: Path to .csv, .xls, or .xlsx file to import
    :param import_type: One of "Insert" or "Update"
    :param submit_after_import: Whether to submit documents after import
    :param console: Set to true if this is to be used from command line. Will print errors or progress to stdout.
    """
    ...

def import_doc(path, pre_process=...): ...
def validate_csv_import_file(path): ...
def export_json(doctype, path, filters=..., or_filters=..., name=..., order_by=...): ...
def export_csv(doctype, path): ...
