"""
This type stub file was generated by pyright.
"""

INVALID_VALUES = ...
MAX_ROWS_IN_PREVIEW = ...
INSERT = ...
UPDATE = ...

class Importer:
    def __init__(
        self, doctype, data_import=..., file_path=..., import_type=..., console=...
    ) -> None: ...
    def get_data_for_import_preview(self): ...
    def before_import(self): ...
    def import_data(self): ...
    def after_import(self): ...
    def process_doc(self, doc): ...
    def insert_record(self, doc): ...
    def update_record(self, doc): ...
    def get_eta(self, current, total, processing_time): ...
    def export_errored_rows(self): ...
    def print_import_log(self, import_log): ...
    def print_grouped_warnings(self, warnings): ...

class ImportFile:
    def __init__(
        self, doctype, file, template_options=..., import_type=...
    ) -> None: ...
    def get_data_from_template_file(self): ...
    def parse_data_from_template(self): ...
    def get_data_for_import_preview(self):
        """Adds a serial number column as the first column"""
        ...
    def get_payloads_for_import(self): ...
    def parse_next_row_for_import(
        self, data
    ):  # -> tuple[Unknown | None, list[Unknown], Unknown]:
        """
        Parses rows that make up a doc. A doc maybe built from a single row or multiple rows.
        Returns the doc, rows, and data without the rows.
        """
        ...
    def get_warnings(self): ...
    def read_file(self, file_path): ...
    def read_content(self, content, extension): ...

class Row:
    link_values_exist_map = ...
    def __init__(self, index, row, doctype, header, import_type) -> None: ...
    def parse_doc(self, doctype, parent_doc=..., table_df=...): ...
    def validate_value(self, value, col): ...
    def link_exists(self, value, df): ...
    def parse_value(self, value, col): ...
    def get_date(self, value, column): ...
    def get_values(self, indexes): ...
    def get(self, index): ...
    def as_list(self): ...

class Header(Row):
    def __init__(
        self, index, row, doctype, raw_data, column_to_field_map=...
    ) -> None: ...
    def get_column_indexes(self, doctype, tablefield=...): ...
    def get_columns(self, indexes): ...

class Column:
    seen = ...
    fields_column_map = ...
    def __init__(
        self, index, header, doctype, column_values, map_to_field=..., seen=...
    ) -> None: ...
    def parse(self): ...
    def guess_date_format_for_column(self):  # -> str | None:
        """Guesses date format for a column by parsing all the values in the column,
        getting the date format and then returning the one which has the maximum frequency
        """
        ...
    def validate_values(self): ...
    def as_dict(self): ...

def build_fields_dict_for_column_matching(parent_doctype):  # -> dict[Unknown, Unknown]:
    """
    Build a dict with various keys to match with column headers and value as docfield
    The keys can be label or fieldname
    {
            'Customer': df1,
            'customer': df1,
            'Due Date': df2,
            'due_date': df2,
            'Item Code (Sales Invoice Item)': df3,
            'Sales Invoice Item:item_code': df3,
    }
    """
    ...

def get_df_for_column_header(doctype, header): ...
def get_id_field(doctype): ...
def get_autoname_field(doctype): ...
def get_item_at_index(_list, i, default=...): ...
def get_user_format(date_format): ...
def df_as_json(df): ...
def get_select_options(df): ...
