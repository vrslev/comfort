"""
This type stub file was generated by pyright.
"""

import frappe

@frappe.whitelist(allow_guest=True)
@frappe.read_only()
def get(): ...
@frappe.whitelist()
@frappe.read_only()
def get_list(): ...
@frappe.whitelist()
@frappe.read_only()
def get_count(): ...
def execute(doctype, *args, **kwargs): ...
def get_form_params():
    """Stringify GET request parameters."""
    ...

def validate_args(data): ...
def validate_fields(data): ...
def validate_filters(data, filters): ...
def setup_group_by(data):  # -> None:
    """Add columns for aggregated values e.g. count(name)"""
    ...

def raise_invalid_field(fieldname): ...
def is_standard(fieldname): ...
def extract_fieldname(field): ...
def get_meta_and_docfield(fieldname, data): ...
def update_wildcard_field_param(data): ...
def clean_params(data): ...
def parse_json(data): ...
def get_parenttype_and_fieldname(field, data): ...
def compress(data, args=...):  # -> dict[str, list[Unknown]]:
    """separate keys and values"""
    ...

@frappe.whitelist()
def save_report():
    """save report"""
    ...

@frappe.whitelist()
@frappe.read_only()
def export_query():  # -> None:
    """export from report builder"""
    ...

def append_totals_row(data): ...
def get_labels(fields, doctype):  # -> list[Unknown]:
    """get column labels based on column names"""
    ...

def handle_duration_fieldtype_values(doctype, data, fields): ...
@frappe.whitelist()
def delete_items():  # -> None:
    """delete selected items"""
    ...

def delete_bulk(doctype, items): ...
@frappe.whitelist()
@frappe.read_only()
def get_sidebar_stats(stats, doctype, filters=...): ...
@frappe.whitelist()
@frappe.read_only()
def get_stats(stats, doctype, filters=...):  # -> dict[Unknown, Unknown]:
    """get tag info"""
    ...

@frappe.whitelist()
def get_filter_dashboard_data(
    stats, doctype, filters=...
):  # -> dict[Unknown, Unknown]:
    """get tags info"""
    ...

def scrub_user_tags(tagcount):  # -> list[Unknown]:
    """rebuild tag list for tags"""
    ...

def get_match_cond(doctype, as_condition=...): ...
def build_match_conditions(doctype, user=..., as_condition=...): ...
def get_filters_cond(
    doctype, filters, conditions, ignore_permissions=..., with_match_conditions=...
): ...
