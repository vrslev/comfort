"""
This type stub file was generated by pyright.
"""

import frappe
from frappe.model.document import Document

class DesktopIcon(Document):
    def validate(self): ...
    def on_trash(self): ...

def after_doctype_insert(): ...
def get_desktop_icons(user=...):
    """Return desktop icons for user"""
    ...

@frappe.whitelist()
def add_user_icon(
    _doctype, _report=..., label=..., link=..., type=..., standard=...
):  # -> _dict | map[Unknown | None] | list[Unknown] | Literal[True] | None:
    """Add a new user desktop icon to the desktop"""
    ...

@frappe.whitelist()
def set_order(new_order, user=...):  # -> None:
    """set new order by duplicating user icons (if user is set) or set global order"""
    ...

def set_desktop_icons(visible_list, ignore_duplicate=...):  # -> None:
    """Resets all lists and makes only the given one standard,
    if the desktop icon does not exist and the name is a DocType, then will create
    an icon for the doctype"""
    ...

def set_hidden_list(hidden_list, user=...):  # -> None:
    """Sets property `hidden`=1 in **Desktop Icon** for given user.
    If user is None then it will set global values.
    It will also set the rest of the icons as shown (`hidden` = 0)"""
    ...

def set_hidden(module_name, user=..., hidden=...):  # -> None:
    """Set module hidden property for given user. If user is not specified,
    hide/unhide it globally"""
    ...

def get_all_icons(): ...
def clear_desktop_icons_cache(user=...): ...
def get_user_copy(module_name, user=...):
    """Return user copy (Desktop Icon) of the given module_name. If user copy does not exist, create one.

    :param module_name: Name of the module
    :param user: User for which the copy is required (optional)
    """
    ...

def make_user_copy(module_name, user):
    """Insert and return the user copy of a standard Desktop Icon"""
    ...

def sync_desktop_icons():  # -> None:
    """Sync desktop icons from all apps"""
    ...

def sync_from_app(app):  # -> list[Unknown]:
    """Sync desktop icons from app. To be called during install"""
    ...

@frappe.whitelist()
def update_icons(hidden_list, user=...):  # -> None:
    """update modules"""
    ...

def get_context(context): ...
@frappe.whitelist()
def get_module_icons(user=...): ...
def get_user_icons(user):  # -> list[Unknown]:
    """Get user icons for module setup page"""
    ...

palette = ...

@frappe.whitelist()
def hide(name, user=...): ...
