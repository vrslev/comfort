"""
This type stub file was generated by pyright.
"""

def delete_page_cache(path): ...
def find_first_image(html): ...
def can_cache(no_cache=...): ...
def get_comment_list(doctype, name): ...
def get_home_page(): ...
def get_home_page_via_hooks(): ...
def is_signup_enabled(): ...
def cleanup_page_name(title):  # -> str:
    """make page name from title"""
    ...

def get_shade(color, percent): ...
def detect_color_format(color): ...
def get_shade_for_channel(channel_value, percent): ...
def format_color(r, g, b, a, color_format): ...
def convert_to_hex(channel_value): ...
def abs_url(path):  # -> None:
    """Deconstructs and Reconstructs a URL into an absolute URL or a URL relative from root '/'"""
    ...

def get_toc(route, url_prefix=..., app=...):
    """Insert full index (table of contents) for {index} tag"""
    ...

def get_next_link(route, url_prefix=..., app=...): ...
def get_full_index(route=..., app=...):
    """Returns full index of the website for www upto the n-th level"""
    ...

def extract_title(source, path):  # -> Any:
    """Returns title from `&lt;!-- title --&gt;` or &lt;h1&gt; or path"""
    ...

def extract_comment_tag(source, tag):  # -> Any | None:
    """Extract custom tags in comments from source.

    :param source: raw template source in HTML
    :param title: tag to search, example "title"
    """
    ...

def add_missing_headers():  # -> None:
    """Walk and add missing headers in docs (to be called from bench execute)"""
    ...

def get_html_content_based_on_type(
    doc, fieldname, content_type
):  # -> UnicodeWithAttrs | Literal['']:
    """
    Set content based on content_type
    """
    ...
