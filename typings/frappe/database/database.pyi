"""
This type stub file was generated by pyright.
"""

import frappe

"""
This type stub file was generated by pyright.
"""

class Database:
    """
    Open a database connection with the given parmeters, if use_default is True, use the
    login details from `conf.py`. This is called by the request handler and is accessible using
    the `db` global variable. the `sql` method is also global to run queries
    """

    VARCHAR_LEN = ...
    MAX_COLUMN_LENGTH = ...
    OPTIONAL_COLUMNS = ...
    DEFAULT_SHORTCUTS = ...
    STANDARD_VARCHAR_COLUMNS = ...
    DEFAULT_COLUMNS = ...
    class InvalidColumnName(frappe.ValidationError): ...
    def __init__(
        self, host=..., user=..., password=..., ac_name=..., use_default=..., port=...
    ) -> None: ...
    def setup_type_map(self): ...
    def connect(self):
        """Connects to a database as set in `site_config.json`."""
        ...
    def use(self, db_name):
        """`USE` db_name."""
        ...
    def get_connection(self): ...
    def get_database_size(self): ...
    def sql(
        self,
        query,
        values=...,
        as_dict=...,
        as_list=...,
        formatted=...,
        debug=...,
        ignore_ddl=...,
        as_utf8=...,
        auto_commit=...,
        update=...,
        explain=...,
    ):
        """Execute a SQL query and fetch all rows.

        :param query: SQL query.
        :param values: List / dict of values to be escaped and substituted in the query.
        :param as_dict: Return as a dictionary.
        :param as_list: Always return as a list.
        :param formatted: Format values like date etc.
        :param debug: Print query and `EXPLAIN` in debug log.
        :param ignore_ddl: Catch exception if table, column missing.
        :param as_utf8: Encode values as UTF 8.
        :param auto_commit: Commit after executing the query.
        :param update: Update this dict to all rows (if returned `as_dict`).

        Examples:

                # return customer names as dicts
                frappe.db.sql("select name from tabCustomer", as_dict=True)

                # return names beginning with a
                frappe.db.sql("select name from tabCustomer where name like %s", "a%")

                # values as dict
                frappe.db.sql("select name from tabCustomer where name like %(name)s and owner=%(owner)s",
                        {"name": "a%", "owner":"test@example.com"})

        """
        ...
    def log_query(self, query, values, debug, explain): ...
    def mogrify(self, query, values):
        """build the query string with values"""
        ...
    def explain_query(self, query, values=...):
        """Print `EXPLAIN` in error log."""
        ...
    def sql_list(self, query, values=..., debug=...):
        """Return data as list of single elements (first column).

        Example:

                # doctypes = ["DocType", "DocField", "User", ...]
                doctypes = frappe.db.sql_list("select name from DocType")
        """
        ...
    def sql_ddl(self, query, values=..., debug=...):
        """Commit and execute a query. DDL (Data Definition Language) queries that alter schema
        autocommit in MariaDB."""
        ...
    def check_transaction_status(self, query):
        """Raises exception if more than 20,000 `INSERT`, `UPDATE` queries are
        executed in one transaction. This is to ensure that writes are always flushed otherwise this
        could cause the system to hang."""
        ...
    def fetch_as_dict(self, formatted=..., as_utf8=...):
        """Internal. Converts results to dict."""
        ...
    @staticmethod
    def clear_db_table_cache(query): ...
    @staticmethod
    def needs_formatting(result, formatted):
        """Returns true if the first row in the result has a Date, Datetime, Long Int."""
        ...
    def get_description(self):
        """Returns result metadata."""
        ...
    @staticmethod
    def convert_to_lists(res, formatted=..., as_utf8=...):
        """Convert tuple output to lists (internal)."""
        ...
    def build_conditions(self, filters):
        """Convert filters sent as dict, lists to SQL conditions. filter's key
        is passed by map function, build conditions like:

        * ifnull(`fieldname`, default_value) = %(fieldname)s
        * `fieldname` [=, !=, >, >=, <, <=] %(fieldname)s
        """
        ...
    def get(self, doctype, filters=..., as_dict=..., cache=...):
        """Returns `get_value` with fieldname='*'"""
        ...
    def get_value(
        self,
        doctype,
        filters=...,
        fieldname=...,
        ignore=...,
        as_dict=...,
        debug=...,
        order_by=...,
        cache=...,
        for_update=...,
    ):
        """Returns a document property or list of properties.

        :param doctype: DocType name.
        :param filters: Filters like `{"x":"y"}` or name of the document. `None` if Single DocType.
        :param fieldname: Column name.
        :param ignore: Don't raise exception if table, column is missing.
        :param as_dict: Return values as dict.
        :param debug: Print query in error log.
        :param order_by: Column to order by

        Example:

                # return first customer starting with a
                frappe.db.get_value("Customer", {"name": ("like a%")})

                # return last login of **User** `test@example.com`
                frappe.db.get_value("User", "test@example.com", "last_login")

                last_login, last_ip = frappe.db.get_value("User", "test@example.com",
                        ["last_login", "last_ip"])

                # returns default date_format
                frappe.db.get_value("System Settings", None, "date_format")
        """
        ...
    def get_values(
        self,
        doctype,
        filters=...,
        fieldname=...,
        ignore=...,
        as_dict=...,
        debug=...,
        order_by=...,
        update=...,
        cache=...,
        for_update=...,
    ):
        """Returns multiple document properties.

        :param doctype: DocType name.
        :param filters: Filters like `{"x":"y"}` or name of the document.
        :param fieldname: Column name.
        :param ignore: Don't raise exception if table, column is missing.
        :param as_dict: Return values as dict.
        :param debug: Print query in error log.
        :param order_by: Column to order by

        Example:

                # return first customer starting with a
                customers = frappe.db.get_values("Customer", {"name": ("like a%")})

                # return last login of **User** `test@example.com`
                user = frappe.db.get_values("User", "test@example.com", "*")[0]
        """
        ...
    def get_values_from_single(
        self, fields, filters, doctype, as_dict=..., debug=..., update=...
    ):
        """Get values from `tabSingles` (Single DocTypes) (internal).

        :param fields: List of fields,
        :param filters: Filters (dict).
        :param doctype: DocType name.
        """
        ...
    def get_singles_dict(self, doctype, debug=...):
        """Get Single DocType as dict.

        :param doctype: DocType of the single object whose value is requested

        Example:

                # Get coulmn and value of the single doctype Accounts Settings
                account_settings = frappe.db.get_singles_dict("Accounts Settings")
        """
        ...
    @staticmethod
    def get_all(*args, **kwargs): ...
    @staticmethod
    def get_list(*args, **kwargs): ...
    def get_single_value(self, doctype, fieldname, cache=...):
        """Get property of Single DocType. Cache locally by default

        :param doctype: DocType of the single object whose value is requested
        :param fieldname: `fieldname` of the property whose value is requested

        Example:

                # Get the default value of the company from the Global Defaults doctype.
                company = frappe.db.get_single_value('Global Defaults', 'default_company')
        """
        ...
    def get_singles_value(self, *args, **kwargs):
        """Alias for get_single_value"""
        ...
    def update(self, *args, **kwargs):
        """Update multiple values. Alias for `set_value`."""
        ...
    def set_value(
        self,
        dt,
        dn,
        field,
        val=...,
        modified=...,
        modified_by=...,
        update_modified=...,
        debug=...,
        for_update=...,
    ):
        """Set a single value in the database, do not call the ORM triggers
        but update the modified timestamp (unless specified not to).

        **Warning:** this function will not call Document events and should be avoided in normal cases.

        :param dt: DocType name.
        :param dn: Document name.
        :param field: Property / field name or dictionary of values to be updated
        :param value: Value to be updated.
        :param modified: Use this as the `modified` timestamp.
        :param modified_by: Set this user as `modified_by`.
        :param update_modified: default True. Set as false, if you don't want to update the timestamp.
        :param debug: Print the query in the developer / js console.
        :param for_update: Will add a row-level lock to the value that is being set so that it can be released on commit.
        """
        ...
    @staticmethod
    def set(doc, field, val):
        """Set value in document. **Avoid**"""
        ...
    def touch(self, doctype, docname):
        """Update the modified timestamp of this document."""
        ...
    @staticmethod
    def set_temp(value):
        """Set a temperory value and return a key."""
        ...
    @staticmethod
    def get_temp(key):
        """Return the temperory value and delete it."""
        ...
    def set_global(self, key, val, user=...):
        """Save a global key value. Global values will be automatically set if they match fieldname."""
        ...
    def get_global(self, key, user=...):
        """Returns a global key value."""
        ...
    def get_default(self, key, parent=...):
        """Returns default value as a list if multiple or single"""
        ...
    @staticmethod
    def set_default(key, val, parent=..., parenttype=...):
        """Sets a global / user default value."""
        ...
    @staticmethod
    def add_default(key, val, parent=..., parenttype=...):
        """Append a default value for a key, there can be multiple default values for a particular key."""
        ...
    @staticmethod
    def get_defaults(key=..., parent=...):
        """Get all defaults"""
        ...
    def begin(self): ...
    def commit(self):
        """Commit current transaction. Calls SQL `COMMIT`."""
        ...
    def add_before_commit(self, method, args=..., kwargs=...): ...
    @staticmethod
    def flush_realtime_log(): ...
    def rollback(self):
        """`ROLLBACK` current transaction."""
        ...
    def field_exists(self, dt, fn):
        """Return true of field exists."""
        ...
    def table_exists(self, doctype):
        """Returns True if table for given doctype exists."""
        ...
    def has_table(self, doctype): ...
    def get_tables(self): ...
    def a_row_exists(self, doctype):
        """Returns True if atleast one row exists."""
        ...
    def exists(self, dt, dn=..., cache=...):
        """Returns true if document exists.

        :param dt: DocType name.
        :param dn: Document name or filter dict."""
        ...
    def count(self, dt, filters=..., debug=..., cache=...):
        """Returns `COUNT(*)` for given DocType and filters."""
        ...
    @staticmethod
    def format_date(date): ...
    @staticmethod
    def format_datetime(datetime): ...
    def get_creation_count(self, doctype, minutes):
        """Get count of records created in the last x minutes"""
        ...
    def get_db_table_columns(self, table):
        """Returns list of column names from given table."""
        ...
    def get_table_columns(self, doctype):
        """Returns list of column names from given doctype."""
        ...
    def has_column(self, doctype, column):
        """Returns True if column exists in database."""
        ...
    def get_column_type(self, doctype, column): ...
    def has_index(self, table_name, index_name): ...
    def add_index(self, doctype, fields, index_name=...): ...
    def add_unique(self, doctype, fields, constraint_name=...): ...
    @staticmethod
    def get_index_name(fields): ...
    def get_system_setting(self, key): ...
    def close(self):
        """Close database connection."""
        ...
    @staticmethod
    def escape(s, percent=...):
        """Excape quotes and percent in given string."""
        ...
    @staticmethod
    def is_column_missing(e): ...
    def get_descendants(self, doctype, name):
        """Return descendants of the current record"""
        ...
    def is_missing_table_or_column(self, e): ...
    def multisql(self, sql_dict, values=..., **kwargs): ...
    def delete(self, doctype, conditions, debug=...): ...
    def get_last_created(self, doctype): ...
    def clear_table(self, doctype): ...
    def log_touched_tables(self, query, values=...): ...
    def bulk_insert(self, doctype, fields, values, ignore_duplicates=...):
        """
        Insert multiple records at a time

        :param doctype: Doctype name
        :param fields: list of fields
        :params values: list of list of values
        """
        ...

def enqueue_jobs_after_commit(): ...
